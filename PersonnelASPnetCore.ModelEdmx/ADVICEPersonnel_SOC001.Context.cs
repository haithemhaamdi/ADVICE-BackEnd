//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PersonnelASPnetCore.ModelEdmx
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ARTIPERSONNEL_SOC001Entities : DbContext
    {
        public ARTIPERSONNEL_SOC001Entities()
            : base("name=ARTIPERSONNEL_SOC001Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ACTIVITE> ACTIVITE { get; set; }
        public virtual DbSet<APPELLATION> APPELLATION { get; set; }
        public virtual DbSet<AVANCEMENT> AVANCEMENT { get; set; }
        public virtual DbSet<AVANCEMENT_DETAIL> AVANCEMENT_DETAIL { get; set; }
        public virtual DbSet<BANQUE> BANQUE { get; set; }
        public virtual DbSet<BANQUE_VIREMENT> BANQUE_VIREMENT { get; set; }
        public virtual DbSet<BAREME_IMPOT> BAREME_IMPOT { get; set; }
        public virtual DbSet<BAREME_SMIG> BAREME_SMIG { get; set; }
        public virtual DbSet<BORDEREAU> BORDEREAU { get; set; }
        public virtual DbSet<BULLETIN_PAIE> BULLETIN_PAIE { get; set; }
        public virtual DbSet<BULLETIN_PAIE_DETAIL> BULLETIN_PAIE_DETAIL { get; set; }
        public virtual DbSet<COMPTE_COMPTABLE> COMPTE_COMPTABLE { get; set; }
        public virtual DbSet<CONNECTIONS_HISTORY> CONNECTIONS_HISTORY { get; set; }
        public virtual DbSet<DECLARATION_CNSS> DECLARATION_CNSS { get; set; }
        public virtual DbSet<DECLARATION_CNSS_DETAIL> DECLARATION_CNSS_DETAIL { get; set; }
        public virtual DbSet<DECLARATION_CNSS_TAUX_EMPLOYEUR> DECLARATION_CNSS_TAUX_EMPLOYEUR { get; set; }
        public virtual DbSet<DEPARTEMENT> DEPARTEMENT { get; set; }
        public virtual DbSet<ECRITURE> ECRITURE { get; set; }
        public virtual DbSet<ECRITURE_DETAIL> ECRITURE_DETAIL { get; set; }
        public virtual DbSet<ECRITURE_OUVERTURE> ECRITURE_OUVERTURE { get; set; }
        public virtual DbSet<EMPLOYE> EMPLOYE { get; set; }
        public virtual DbSet<EMPLOYE_A_CHARGE> EMPLOYE_A_CHARGE { get; set; }
        public virtual DbSet<EMPLOYE_ABSENCE> EMPLOYE_ABSENCE { get; set; }
        public virtual DbSet<EMPLOYE_AFFICHAGE_GRILLE> EMPLOYE_AFFICHAGE_GRILLE { get; set; }
        public virtual DbSet<EMPLOYE_AJUSTEMENT_CONGE> EMPLOYE_AJUSTEMENT_CONGE { get; set; }
        public virtual DbSet<EMPLOYE_AVANCE> EMPLOYE_AVANCE { get; set; }
        public virtual DbSet<EMPLOYE_CONGE> EMPLOYE_CONGE { get; set; }
        public virtual DbSet<EMPLOYE_CONTRAT> EMPLOYE_CONTRAT { get; set; }
        public virtual DbSet<EMPLOYE_CORRESPONDANCE> EMPLOYE_CORRESPONDANCE { get; set; }
        public virtual DbSet<EMPLOYE_DEDUCTION> EMPLOYE_DEDUCTION { get; set; }
        public virtual DbSet<EMPLOYE_DISCIPLINE> EMPLOYE_DISCIPLINE { get; set; }
        public virtual DbSet<EMPLOYE_DOCUMENT> EMPLOYE_DOCUMENT { get; set; }
        public virtual DbSet<EMPLOYE_FORMATION> EMPLOYE_FORMATION { get; set; }
        public virtual DbSet<EMPLOYE_OBSERVATION> EMPLOYE_OBSERVATION { get; set; }
        public virtual DbSet<EMPLOYE_PRET> EMPLOYE_PRET { get; set; }
        public virtual DbSet<EMPLOYE_RUBRIQUE> EMPLOYE_RUBRIQUE { get; set; }
        public virtual DbSet<EMPLOYE_VENTILATION> EMPLOYE_VENTILATION { get; set; }
        public virtual DbSet<FONCTION> FONCTION { get; set; }
        public virtual DbSet<GRILLE> GRILLE { get; set; }
        public virtual DbSet<GRILLE_DETAIL> GRILLE_DETAIL { get; set; }
        public virtual DbSet<JOUR_FERIE> JOUR_FERIE { get; set; }
        public virtual DbSet<JOURNAL_COMPTABLE> JOURNAL_COMPTABLE { get; set; }
        public virtual DbSet<LISTE_RAPPORT> LISTE_RAPPORT { get; set; }
        public virtual DbSet<MODE_PAIEMENT> MODE_PAIEMENT { get; set; }
        public virtual DbSet<MODELE_CORRESPONDANCE> MODELE_CORRESPONDANCE { get; set; }
        public virtual DbSet<MODELE_PAIE> MODELE_PAIE { get; set; }
        public virtual DbSet<MODELE_PAIE_DETAIL> MODELE_PAIE_DETAIL { get; set; }
        public virtual DbSet<NATURE_PAIEMENT> NATURE_PAIEMENT { get; set; }
        public virtual DbSet<PARAMETRE_COMPTABILITE> PARAMETRE_COMPTABILITE { get; set; }
        public virtual DbSet<PARAMETRE_POINTAGE> PARAMETRE_POINTAGE { get; set; }
        public virtual DbSet<PLAN_PAIE> PLAN_PAIE { get; set; }
        public virtual DbSet<PLAN_PAIE_DETAIL> PLAN_PAIE_DETAIL { get; set; }
        public virtual DbSet<POINTAGE> POINTAGE { get; set; }
        public virtual DbSet<REFRESH_TOKEN> REFRESH_TOKEN { get; set; }
        public virtual DbSet<ROLE> ROLE { get; set; }
        public virtual DbSet<RUBRIQUE> RUBRIQUE { get; set; }
        public virtual DbSet<SEQUENCE> SEQUENCE { get; set; }
        public virtual DbSet<SITE> SITE { get; set; }
        public virtual DbSet<TYPE_CONTRAT> TYPE_CONTRAT { get; set; }
        public virtual DbSet<TYPE_INDEMNITE> TYPE_INDEMNITE { get; set; }
        public virtual DbSet<TYPE_PERIODE> TYPE_PERIODE { get; set; }
        public virtual DbSet<TYPE_PRET> TYPE_PRET { get; set; }
        public virtual DbSet<TYPE_RUBRIQUE> TYPE_RUBRIQUE { get; set; }
        public virtual DbSet<USER> USER { get; set; }
        public virtual DbSet<VIREMENT> VIREMENT { get; set; }
        public virtual DbSet<VIREMENT_DETAIL> VIREMENT_DETAIL { get; set; }
        public virtual DbSet<DECLARATION_EMPLOYEUR> DECLARATION_EMPLOYEUR { get; set; }
        public virtual DbSet<DECOMPTE_MONNAIE> DECOMPTE_MONNAIE { get; set; }
        public virtual DbSet<IMP_CAVIS> IMP_CAVIS { get; set; }
        public virtual DbSet<IMP_DECLARATION_ASSURANCE> IMP_DECLARATION_ASSURANCE { get; set; }
        public virtual DbSet<IMP_FICHE_ANNUELLE_PAIE> IMP_FICHE_ANNUELLE_PAIE { get; set; }
        public virtual DbSet<SITUATION_CONGE> SITUATION_CONGE { get; set; }
        public virtual DbSet<SITUATION_CONGE_SPECIAL> SITUATION_CONGE_SPECIAL { get; set; }
        public virtual DbSet<Grand_Livre> Grand_Livre { get; set; }
        public virtual DbSet<Vue_CubeAnalysePaie> Vue_CubeAnalysePaie { get; set; }
        public virtual DbSet<Vue_CubeAnalysePersonnel> Vue_CubeAnalysePersonnel { get; set; }
        public virtual DbSet<Vue_Dossier_Employe> Vue_Dossier_Employe { get; set; }
        public virtual DbSet<Vue_Employe> Vue_Employe { get; set; }
        public virtual DbSet<Vue_Mouvement_Conge> Vue_Mouvement_Conge { get; set; }
        public virtual DbSet<Vue_Mouvement_Conge_Special> Vue_Mouvement_Conge_Special { get; set; }
        public virtual DbSet<Vue_SituationPret> Vue_SituationPret { get; set; }
        public virtual DbSet<Vue_SoldeActuel_Conge> Vue_SoldeActuel_Conge { get; set; }
    
        public virtual int PROC_CALCUL_CAVIS(Nullable<int> annee, Nullable<int> trimestre)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("Annee", annee) :
                new ObjectParameter("Annee", typeof(int));
    
            var trimestreParameter = trimestre.HasValue ?
                new ObjectParameter("Trimestre", trimestre) :
                new ObjectParameter("Trimestre", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_CALCUL_CAVIS", anneeParameter, trimestreParameter);
        }
    
        public virtual int PROC_CALCUL_DECLARATION_ASSURANCE(Nullable<int> annee, Nullable<int> trimestre)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("Annee", annee) :
                new ObjectParameter("Annee", typeof(int));
    
            var trimestreParameter = trimestre.HasValue ?
                new ObjectParameter("Trimestre", trimestre) :
                new ObjectParameter("Trimestre", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_CALCUL_DECLARATION_ASSURANCE", anneeParameter, trimestreParameter);
        }
    
        public virtual int PROC_CALCUL_DECLARATION_CNSS(Nullable<int> annee, Nullable<int> trimestre)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("Annee", annee) :
                new ObjectParameter("Annee", typeof(int));
    
            var trimestreParameter = trimestre.HasValue ?
                new ObjectParameter("Trimestre", trimestre) :
                new ObjectParameter("Trimestre", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_CALCUL_DECLARATION_CNSS", anneeParameter, trimestreParameter);
        }
    
        public virtual int PROC_CALCUL_DECLARATION_EMPLOYEUR(Nullable<int> annee)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("Annee", annee) :
                new ObjectParameter("Annee", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_CALCUL_DECLARATION_EMPLOYEUR", anneeParameter);
        }
    
        public virtual int PROC_CALCUL_DECLARATION_MENSUEL_IMPOT(Nullable<int> tauxTFP, Nullable<int> tauxFOPROLOS, Nullable<int> mois, Nullable<int> annee)
        {
            var tauxTFPParameter = tauxTFP.HasValue ?
                new ObjectParameter("TauxTFP", tauxTFP) :
                new ObjectParameter("TauxTFP", typeof(int));
    
            var tauxFOPROLOSParameter = tauxFOPROLOS.HasValue ?
                new ObjectParameter("TauxFOPROLOS", tauxFOPROLOS) :
                new ObjectParameter("TauxFOPROLOS", typeof(int));
    
            var moisParameter = mois.HasValue ?
                new ObjectParameter("Mois", mois) :
                new ObjectParameter("Mois", typeof(int));
    
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("Annee", annee) :
                new ObjectParameter("Annee", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_CALCUL_DECLARATION_MENSUEL_IMPOT", tauxTFPParameter, tauxFOPROLOSParameter, moisParameter, anneeParameter);
        }
    
        public virtual int PROC_CALCUL_DECOMPTE_MONNAIE(Nullable<int> annee, Nullable<int> codePeriode, Nullable<int> limiteMonnaie)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("Annee", annee) :
                new ObjectParameter("Annee", typeof(int));
    
            var codePeriodeParameter = codePeriode.HasValue ?
                new ObjectParameter("CodePeriode", codePeriode) :
                new ObjectParameter("CodePeriode", typeof(int));
    
            var limiteMonnaieParameter = limiteMonnaie.HasValue ?
                new ObjectParameter("LimiteMonnaie", limiteMonnaie) :
                new ObjectParameter("LimiteMonnaie", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_CALCUL_DECOMPTE_MONNAIE", anneeParameter, codePeriodeParameter, limiteMonnaieParameter);
        }
    
        public virtual int PROC_CALCUL_FICHE_ANNUELLE_PAIE(Nullable<int> annee)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("Annee", annee) :
                new ObjectParameter("Annee", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_CALCUL_FICHE_ANNUELLE_PAIE", anneeParameter);
        }
    
        public virtual int PROC_CALCUL_SITUATION_CONGE(Nullable<int> annee)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("Annee", annee) :
                new ObjectParameter("Annee", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_CALCUL_SITUATION_CONGE", anneeParameter);
        }
    
        public virtual int PROC_CALCUL_SITUATION_CONGE_SPECIAL(Nullable<int> annee)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("Annee", annee) :
                new ObjectParameter("Annee", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_CALCUL_SITUATION_CONGE_SPECIAL", anneeParameter);
        }
    
        public virtual int PROC_CHECK_ISACTIVE_TOKEN(Nullable<bool> revokeAll)
        {
            var revokeAllParameter = revokeAll.HasValue ?
                new ObjectParameter("RevokeAll", revokeAll) :
                new ObjectParameter("RevokeAll", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_CHECK_ISACTIVE_TOKEN", revokeAllParameter);
        }
    
        public virtual int PROC_CONNECTIONS_HISTORY(string codeEmploye, string username, string firstName, string lastName, string role, Nullable<int> connections, Nullable<System.DateTime> signInDate, Nullable<System.DateTime> signOutDate, string hostname, string macAddress, string ipAddress)
        {
            var codeEmployeParameter = codeEmploye != null ?
                new ObjectParameter("CodeEmploye", codeEmploye) :
                new ObjectParameter("CodeEmploye", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var connectionsParameter = connections.HasValue ?
                new ObjectParameter("Connections", connections) :
                new ObjectParameter("Connections", typeof(int));
    
            var signInDateParameter = signInDate.HasValue ?
                new ObjectParameter("SignInDate", signInDate) :
                new ObjectParameter("SignInDate", typeof(System.DateTime));
    
            var signOutDateParameter = signOutDate.HasValue ?
                new ObjectParameter("SignOutDate", signOutDate) :
                new ObjectParameter("SignOutDate", typeof(System.DateTime));
    
            var hostnameParameter = hostname != null ?
                new ObjectParameter("Hostname", hostname) :
                new ObjectParameter("Hostname", typeof(string));
    
            var macAddressParameter = macAddress != null ?
                new ObjectParameter("MacAddress", macAddress) :
                new ObjectParameter("MacAddress", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_CONNECTIONS_HISTORY", codeEmployeParameter, usernameParameter, firstNameParameter, lastNameParameter, roleParameter, connectionsParameter, signInDateParameter, signOutDateParameter, hostnameParameter, macAddressParameter, ipAddressParameter);
        }
    
        public virtual int PROC_CREATE_BULLETIN_PAIE(string numeroBulletin, Nullable<System.DateTime> datePaye, string codePlan, string codePeriode, string libellePeriode, string codeTypePeriode, Nullable<int> jourBase, Nullable<int> heureBase, string codeModele, string codeModePaiement, string codeBanque, string libelleBanque, string codeEmploye, string nomEmploye, Nullable<bool> valide, Nullable<decimal> salaireBase, Nullable<decimal> salaireNet, string rIB, string cIN, string matriculeCNSS, string matriculeAssuranceGroupe, string notes, string codeOperateur, Nullable<System.DateTime> dateOperation, Nullable<bool> chefFamille, Nullable<int> nombrePersonneACharge, Nullable<decimal> totalDeduction, string codeDepartement, string libelleDepartement, string codeFonction, string libelleFonction, string codeGrille, string codeSituation, Nullable<bool> smig, Nullable<bool> imposable, Nullable<bool> cotisationSociale, Nullable<bool> assuranceGroupe, Nullable<bool> impotLiquidatif, Nullable<decimal> montantPlafondAssuranceGroupe, Nullable<decimal> montantRedevanceCompensation, string matriculeEmploye, Nullable<bool> redevanceCompensation, Nullable<decimal> montantCavis, Nullable<bool> cavis, Nullable<decimal> soldeConge, string codeTypeContrat, Nullable<decimal> arrondissementPositif, Nullable<decimal> arrondissementNegatif)
        {
            var numeroBulletinParameter = numeroBulletin != null ?
                new ObjectParameter("NumeroBulletin", numeroBulletin) :
                new ObjectParameter("NumeroBulletin", typeof(string));
    
            var datePayeParameter = datePaye.HasValue ?
                new ObjectParameter("DatePaye", datePaye) :
                new ObjectParameter("DatePaye", typeof(System.DateTime));
    
            var codePlanParameter = codePlan != null ?
                new ObjectParameter("CodePlan", codePlan) :
                new ObjectParameter("CodePlan", typeof(string));
    
            var codePeriodeParameter = codePeriode != null ?
                new ObjectParameter("CodePeriode", codePeriode) :
                new ObjectParameter("CodePeriode", typeof(string));
    
            var libellePeriodeParameter = libellePeriode != null ?
                new ObjectParameter("LibellePeriode", libellePeriode) :
                new ObjectParameter("LibellePeriode", typeof(string));
    
            var codeTypePeriodeParameter = codeTypePeriode != null ?
                new ObjectParameter("CodeTypePeriode", codeTypePeriode) :
                new ObjectParameter("CodeTypePeriode", typeof(string));
    
            var jourBaseParameter = jourBase.HasValue ?
                new ObjectParameter("JourBase", jourBase) :
                new ObjectParameter("JourBase", typeof(int));
    
            var heureBaseParameter = heureBase.HasValue ?
                new ObjectParameter("HeureBase", heureBase) :
                new ObjectParameter("HeureBase", typeof(int));
    
            var codeModeleParameter = codeModele != null ?
                new ObjectParameter("CodeModele", codeModele) :
                new ObjectParameter("CodeModele", typeof(string));
    
            var codeModePaiementParameter = codeModePaiement != null ?
                new ObjectParameter("CodeModePaiement", codeModePaiement) :
                new ObjectParameter("CodeModePaiement", typeof(string));
    
            var codeBanqueParameter = codeBanque != null ?
                new ObjectParameter("CodeBanque", codeBanque) :
                new ObjectParameter("CodeBanque", typeof(string));
    
            var libelleBanqueParameter = libelleBanque != null ?
                new ObjectParameter("LibelleBanque", libelleBanque) :
                new ObjectParameter("LibelleBanque", typeof(string));
    
            var codeEmployeParameter = codeEmploye != null ?
                new ObjectParameter("CodeEmploye", codeEmploye) :
                new ObjectParameter("CodeEmploye", typeof(string));
    
            var nomEmployeParameter = nomEmploye != null ?
                new ObjectParameter("NomEmploye", nomEmploye) :
                new ObjectParameter("NomEmploye", typeof(string));
    
            var valideParameter = valide.HasValue ?
                new ObjectParameter("Valide", valide) :
                new ObjectParameter("Valide", typeof(bool));
    
            var salaireBaseParameter = salaireBase.HasValue ?
                new ObjectParameter("SalaireBase", salaireBase) :
                new ObjectParameter("SalaireBase", typeof(decimal));
    
            var salaireNetParameter = salaireNet.HasValue ?
                new ObjectParameter("SalaireNet", salaireNet) :
                new ObjectParameter("SalaireNet", typeof(decimal));
    
            var rIBParameter = rIB != null ?
                new ObjectParameter("RIB", rIB) :
                new ObjectParameter("RIB", typeof(string));
    
            var cINParameter = cIN != null ?
                new ObjectParameter("CIN", cIN) :
                new ObjectParameter("CIN", typeof(string));
    
            var matriculeCNSSParameter = matriculeCNSS != null ?
                new ObjectParameter("MatriculeCNSS", matriculeCNSS) :
                new ObjectParameter("MatriculeCNSS", typeof(string));
    
            var matriculeAssuranceGroupeParameter = matriculeAssuranceGroupe != null ?
                new ObjectParameter("MatriculeAssuranceGroupe", matriculeAssuranceGroupe) :
                new ObjectParameter("MatriculeAssuranceGroupe", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var codeOperateurParameter = codeOperateur != null ?
                new ObjectParameter("CodeOperateur", codeOperateur) :
                new ObjectParameter("CodeOperateur", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var chefFamilleParameter = chefFamille.HasValue ?
                new ObjectParameter("ChefFamille", chefFamille) :
                new ObjectParameter("ChefFamille", typeof(bool));
    
            var nombrePersonneAChargeParameter = nombrePersonneACharge.HasValue ?
                new ObjectParameter("NombrePersonneACharge", nombrePersonneACharge) :
                new ObjectParameter("NombrePersonneACharge", typeof(int));
    
            var totalDeductionParameter = totalDeduction.HasValue ?
                new ObjectParameter("TotalDeduction", totalDeduction) :
                new ObjectParameter("TotalDeduction", typeof(decimal));
    
            var codeDepartementParameter = codeDepartement != null ?
                new ObjectParameter("CodeDepartement", codeDepartement) :
                new ObjectParameter("CodeDepartement", typeof(string));
    
            var libelleDepartementParameter = libelleDepartement != null ?
                new ObjectParameter("LibelleDepartement", libelleDepartement) :
                new ObjectParameter("LibelleDepartement", typeof(string));
    
            var codeFonctionParameter = codeFonction != null ?
                new ObjectParameter("CodeFonction", codeFonction) :
                new ObjectParameter("CodeFonction", typeof(string));
    
            var libelleFonctionParameter = libelleFonction != null ?
                new ObjectParameter("LibelleFonction", libelleFonction) :
                new ObjectParameter("LibelleFonction", typeof(string));
    
            var codeGrilleParameter = codeGrille != null ?
                new ObjectParameter("CodeGrille", codeGrille) :
                new ObjectParameter("CodeGrille", typeof(string));
    
            var codeSituationParameter = codeSituation != null ?
                new ObjectParameter("CodeSituation", codeSituation) :
                new ObjectParameter("CodeSituation", typeof(string));
    
            var smigParameter = smig.HasValue ?
                new ObjectParameter("Smig", smig) :
                new ObjectParameter("Smig", typeof(bool));
    
            var imposableParameter = imposable.HasValue ?
                new ObjectParameter("Imposable", imposable) :
                new ObjectParameter("Imposable", typeof(bool));
    
            var cotisationSocialeParameter = cotisationSociale.HasValue ?
                new ObjectParameter("CotisationSociale", cotisationSociale) :
                new ObjectParameter("CotisationSociale", typeof(bool));
    
            var assuranceGroupeParameter = assuranceGroupe.HasValue ?
                new ObjectParameter("AssuranceGroupe", assuranceGroupe) :
                new ObjectParameter("AssuranceGroupe", typeof(bool));
    
            var impotLiquidatifParameter = impotLiquidatif.HasValue ?
                new ObjectParameter("ImpotLiquidatif", impotLiquidatif) :
                new ObjectParameter("ImpotLiquidatif", typeof(bool));
    
            var montantPlafondAssuranceGroupeParameter = montantPlafondAssuranceGroupe.HasValue ?
                new ObjectParameter("MontantPlafondAssuranceGroupe", montantPlafondAssuranceGroupe) :
                new ObjectParameter("MontantPlafondAssuranceGroupe", typeof(decimal));
    
            var montantRedevanceCompensationParameter = montantRedevanceCompensation.HasValue ?
                new ObjectParameter("MontantRedevanceCompensation", montantRedevanceCompensation) :
                new ObjectParameter("MontantRedevanceCompensation", typeof(decimal));
    
            var matriculeEmployeParameter = matriculeEmploye != null ?
                new ObjectParameter("MatriculeEmploye", matriculeEmploye) :
                new ObjectParameter("MatriculeEmploye", typeof(string));
    
            var redevanceCompensationParameter = redevanceCompensation.HasValue ?
                new ObjectParameter("RedevanceCompensation", redevanceCompensation) :
                new ObjectParameter("RedevanceCompensation", typeof(bool));
    
            var montantCavisParameter = montantCavis.HasValue ?
                new ObjectParameter("MontantCavis", montantCavis) :
                new ObjectParameter("MontantCavis", typeof(decimal));
    
            var cavisParameter = cavis.HasValue ?
                new ObjectParameter("Cavis", cavis) :
                new ObjectParameter("Cavis", typeof(bool));
    
            var soldeCongeParameter = soldeConge.HasValue ?
                new ObjectParameter("SoldeConge", soldeConge) :
                new ObjectParameter("SoldeConge", typeof(decimal));
    
            var codeTypeContratParameter = codeTypeContrat != null ?
                new ObjectParameter("CodeTypeContrat", codeTypeContrat) :
                new ObjectParameter("CodeTypeContrat", typeof(string));
    
            var arrondissementPositifParameter = arrondissementPositif.HasValue ?
                new ObjectParameter("ArrondissementPositif", arrondissementPositif) :
                new ObjectParameter("ArrondissementPositif", typeof(decimal));
    
            var arrondissementNegatifParameter = arrondissementNegatif.HasValue ?
                new ObjectParameter("ArrondissementNegatif", arrondissementNegatif) :
                new ObjectParameter("ArrondissementNegatif", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_CREATE_BULLETIN_PAIE", numeroBulletinParameter, datePayeParameter, codePlanParameter, codePeriodeParameter, libellePeriodeParameter, codeTypePeriodeParameter, jourBaseParameter, heureBaseParameter, codeModeleParameter, codeModePaiementParameter, codeBanqueParameter, libelleBanqueParameter, codeEmployeParameter, nomEmployeParameter, valideParameter, salaireBaseParameter, salaireNetParameter, rIBParameter, cINParameter, matriculeCNSSParameter, matriculeAssuranceGroupeParameter, notesParameter, codeOperateurParameter, dateOperationParameter, chefFamilleParameter, nombrePersonneAChargeParameter, totalDeductionParameter, codeDepartementParameter, libelleDepartementParameter, codeFonctionParameter, libelleFonctionParameter, codeGrilleParameter, codeSituationParameter, smigParameter, imposableParameter, cotisationSocialeParameter, assuranceGroupeParameter, impotLiquidatifParameter, montantPlafondAssuranceGroupeParameter, montantRedevanceCompensationParameter, matriculeEmployeParameter, redevanceCompensationParameter, montantCavisParameter, cavisParameter, soldeCongeParameter, codeTypeContratParameter, arrondissementPositifParameter, arrondissementNegatifParameter);
        }
    
        public virtual int PROC_CREATE_EMPLOYE(string codeEmploye, string matriculeEmploye, string codeAppellation, string nomEmploye, string cin, Nullable<System.DateTime> dateCin, string passeport, Nullable<System.DateTime> datePasseport, Nullable<System.DateTime> dateEntree, Nullable<System.DateTime> dateSortie, string codeFonction, string codeDepartement, Nullable<decimal> salaireBase, Nullable<decimal> tauxHoraire, string codeGrille, string codeSituation, Nullable<System.DateTime> dateSituation, Nullable<bool> chefFamille, Nullable<decimal> congeAnnuel, Nullable<decimal> congeAnterieur, string matriculeSecuriteSociale, string matriculeAssuranceGroupe, string numeroPermisConduite, string codeModePaiement, string codeBanque, string agenceBanque, string rib, Nullable<System.DateTime> dateNaissance, string lieuNaissance, string adresse, string ville, string codePostal, string telephone1, string telephone2, string adresseMail, string nationalite, byte[] photoEmploye, Nullable<int> taillePhoto, string codeOperateur, Nullable<System.DateTime> dateModification, string codePlan, string notes, string codeNaturePaiement, Nullable<decimal> tauxJournalier, Nullable<bool> imposable, Nullable<bool> cotisationSociale, Nullable<bool> assuranceGroupe, Nullable<bool> impotLiquidatif, Nullable<bool> smig, Nullable<bool> redevanceCompensation, Nullable<decimal> montantPlafondAssuranceGroupe, Nullable<decimal> imposableAnterieur, Nullable<decimal> impotAnterieur, string anneeImpotAnterieur, Nullable<bool> cavis, string suffixe, Nullable<int> situationFamilialle)
        {
            var codeEmployeParameter = codeEmploye != null ?
                new ObjectParameter("CodeEmploye", codeEmploye) :
                new ObjectParameter("CodeEmploye", typeof(string));
    
            var matriculeEmployeParameter = matriculeEmploye != null ?
                new ObjectParameter("MatriculeEmploye", matriculeEmploye) :
                new ObjectParameter("MatriculeEmploye", typeof(string));
    
            var codeAppellationParameter = codeAppellation != null ?
                new ObjectParameter("CodeAppellation", codeAppellation) :
                new ObjectParameter("CodeAppellation", typeof(string));
    
            var nomEmployeParameter = nomEmploye != null ?
                new ObjectParameter("NomEmploye", nomEmploye) :
                new ObjectParameter("NomEmploye", typeof(string));
    
            var cinParameter = cin != null ?
                new ObjectParameter("Cin", cin) :
                new ObjectParameter("Cin", typeof(string));
    
            var dateCinParameter = dateCin.HasValue ?
                new ObjectParameter("DateCin", dateCin) :
                new ObjectParameter("DateCin", typeof(System.DateTime));
    
            var passeportParameter = passeport != null ?
                new ObjectParameter("Passeport", passeport) :
                new ObjectParameter("Passeport", typeof(string));
    
            var datePasseportParameter = datePasseport.HasValue ?
                new ObjectParameter("DatePasseport", datePasseport) :
                new ObjectParameter("DatePasseport", typeof(System.DateTime));
    
            var dateEntreeParameter = dateEntree.HasValue ?
                new ObjectParameter("DateEntree", dateEntree) :
                new ObjectParameter("DateEntree", typeof(System.DateTime));
    
            var dateSortieParameter = dateSortie.HasValue ?
                new ObjectParameter("DateSortie", dateSortie) :
                new ObjectParameter("DateSortie", typeof(System.DateTime));
    
            var codeFonctionParameter = codeFonction != null ?
                new ObjectParameter("CodeFonction", codeFonction) :
                new ObjectParameter("CodeFonction", typeof(string));
    
            var codeDepartementParameter = codeDepartement != null ?
                new ObjectParameter("CodeDepartement", codeDepartement) :
                new ObjectParameter("CodeDepartement", typeof(string));
    
            var salaireBaseParameter = salaireBase.HasValue ?
                new ObjectParameter("SalaireBase", salaireBase) :
                new ObjectParameter("SalaireBase", typeof(decimal));
    
            var tauxHoraireParameter = tauxHoraire.HasValue ?
                new ObjectParameter("TauxHoraire", tauxHoraire) :
                new ObjectParameter("TauxHoraire", typeof(decimal));
    
            var codeGrilleParameter = codeGrille != null ?
                new ObjectParameter("CodeGrille", codeGrille) :
                new ObjectParameter("CodeGrille", typeof(string));
    
            var codeSituationParameter = codeSituation != null ?
                new ObjectParameter("CodeSituation", codeSituation) :
                new ObjectParameter("CodeSituation", typeof(string));
    
            var dateSituationParameter = dateSituation.HasValue ?
                new ObjectParameter("DateSituation", dateSituation) :
                new ObjectParameter("DateSituation", typeof(System.DateTime));
    
            var chefFamilleParameter = chefFamille.HasValue ?
                new ObjectParameter("ChefFamille", chefFamille) :
                new ObjectParameter("ChefFamille", typeof(bool));
    
            var congeAnnuelParameter = congeAnnuel.HasValue ?
                new ObjectParameter("CongeAnnuel", congeAnnuel) :
                new ObjectParameter("CongeAnnuel", typeof(decimal));
    
            var congeAnterieurParameter = congeAnterieur.HasValue ?
                new ObjectParameter("CongeAnterieur", congeAnterieur) :
                new ObjectParameter("CongeAnterieur", typeof(decimal));
    
            var matriculeSecuriteSocialeParameter = matriculeSecuriteSociale != null ?
                new ObjectParameter("MatriculeSecuriteSociale", matriculeSecuriteSociale) :
                new ObjectParameter("MatriculeSecuriteSociale", typeof(string));
    
            var matriculeAssuranceGroupeParameter = matriculeAssuranceGroupe != null ?
                new ObjectParameter("MatriculeAssuranceGroupe", matriculeAssuranceGroupe) :
                new ObjectParameter("MatriculeAssuranceGroupe", typeof(string));
    
            var numeroPermisConduiteParameter = numeroPermisConduite != null ?
                new ObjectParameter("NumeroPermisConduite", numeroPermisConduite) :
                new ObjectParameter("NumeroPermisConduite", typeof(string));
    
            var codeModePaiementParameter = codeModePaiement != null ?
                new ObjectParameter("CodeModePaiement", codeModePaiement) :
                new ObjectParameter("CodeModePaiement", typeof(string));
    
            var codeBanqueParameter = codeBanque != null ?
                new ObjectParameter("CodeBanque", codeBanque) :
                new ObjectParameter("CodeBanque", typeof(string));
    
            var agenceBanqueParameter = agenceBanque != null ?
                new ObjectParameter("AgenceBanque", agenceBanque) :
                new ObjectParameter("AgenceBanque", typeof(string));
    
            var ribParameter = rib != null ?
                new ObjectParameter("Rib", rib) :
                new ObjectParameter("Rib", typeof(string));
    
            var dateNaissanceParameter = dateNaissance.HasValue ?
                new ObjectParameter("DateNaissance", dateNaissance) :
                new ObjectParameter("DateNaissance", typeof(System.DateTime));
    
            var lieuNaissanceParameter = lieuNaissance != null ?
                new ObjectParameter("LieuNaissance", lieuNaissance) :
                new ObjectParameter("LieuNaissance", typeof(string));
    
            var adresseParameter = adresse != null ?
                new ObjectParameter("Adresse", adresse) :
                new ObjectParameter("Adresse", typeof(string));
    
            var villeParameter = ville != null ?
                new ObjectParameter("Ville", ville) :
                new ObjectParameter("Ville", typeof(string));
    
            var codePostalParameter = codePostal != null ?
                new ObjectParameter("CodePostal", codePostal) :
                new ObjectParameter("CodePostal", typeof(string));
    
            var telephone1Parameter = telephone1 != null ?
                new ObjectParameter("Telephone1", telephone1) :
                new ObjectParameter("Telephone1", typeof(string));
    
            var telephone2Parameter = telephone2 != null ?
                new ObjectParameter("Telephone2", telephone2) :
                new ObjectParameter("Telephone2", typeof(string));
    
            var adresseMailParameter = adresseMail != null ?
                new ObjectParameter("AdresseMail", adresseMail) :
                new ObjectParameter("AdresseMail", typeof(string));
    
            var nationaliteParameter = nationalite != null ?
                new ObjectParameter("Nationalite", nationalite) :
                new ObjectParameter("Nationalite", typeof(string));
    
            var photoEmployeParameter = photoEmploye != null ?
                new ObjectParameter("PhotoEmploye", photoEmploye) :
                new ObjectParameter("PhotoEmploye", typeof(byte[]));
    
            var taillePhotoParameter = taillePhoto.HasValue ?
                new ObjectParameter("TaillePhoto", taillePhoto) :
                new ObjectParameter("TaillePhoto", typeof(int));
    
            var codeOperateurParameter = codeOperateur != null ?
                new ObjectParameter("CodeOperateur", codeOperateur) :
                new ObjectParameter("CodeOperateur", typeof(string));
    
            var dateModificationParameter = dateModification.HasValue ?
                new ObjectParameter("DateModification", dateModification) :
                new ObjectParameter("DateModification", typeof(System.DateTime));
    
            var codePlanParameter = codePlan != null ?
                new ObjectParameter("CodePlan", codePlan) :
                new ObjectParameter("CodePlan", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var codeNaturePaiementParameter = codeNaturePaiement != null ?
                new ObjectParameter("CodeNaturePaiement", codeNaturePaiement) :
                new ObjectParameter("CodeNaturePaiement", typeof(string));
    
            var tauxJournalierParameter = tauxJournalier.HasValue ?
                new ObjectParameter("TauxJournalier", tauxJournalier) :
                new ObjectParameter("TauxJournalier", typeof(decimal));
    
            var imposableParameter = imposable.HasValue ?
                new ObjectParameter("Imposable", imposable) :
                new ObjectParameter("Imposable", typeof(bool));
    
            var cotisationSocialeParameter = cotisationSociale.HasValue ?
                new ObjectParameter("CotisationSociale", cotisationSociale) :
                new ObjectParameter("CotisationSociale", typeof(bool));
    
            var assuranceGroupeParameter = assuranceGroupe.HasValue ?
                new ObjectParameter("AssuranceGroupe", assuranceGroupe) :
                new ObjectParameter("AssuranceGroupe", typeof(bool));
    
            var impotLiquidatifParameter = impotLiquidatif.HasValue ?
                new ObjectParameter("ImpotLiquidatif", impotLiquidatif) :
                new ObjectParameter("ImpotLiquidatif", typeof(bool));
    
            var smigParameter = smig.HasValue ?
                new ObjectParameter("Smig", smig) :
                new ObjectParameter("Smig", typeof(bool));
    
            var redevanceCompensationParameter = redevanceCompensation.HasValue ?
                new ObjectParameter("RedevanceCompensation", redevanceCompensation) :
                new ObjectParameter("RedevanceCompensation", typeof(bool));
    
            var montantPlafondAssuranceGroupeParameter = montantPlafondAssuranceGroupe.HasValue ?
                new ObjectParameter("MontantPlafondAssuranceGroupe", montantPlafondAssuranceGroupe) :
                new ObjectParameter("MontantPlafondAssuranceGroupe", typeof(decimal));
    
            var imposableAnterieurParameter = imposableAnterieur.HasValue ?
                new ObjectParameter("ImposableAnterieur", imposableAnterieur) :
                new ObjectParameter("ImposableAnterieur", typeof(decimal));
    
            var impotAnterieurParameter = impotAnterieur.HasValue ?
                new ObjectParameter("ImpotAnterieur", impotAnterieur) :
                new ObjectParameter("ImpotAnterieur", typeof(decimal));
    
            var anneeImpotAnterieurParameter = anneeImpotAnterieur != null ?
                new ObjectParameter("AnneeImpotAnterieur", anneeImpotAnterieur) :
                new ObjectParameter("AnneeImpotAnterieur", typeof(string));
    
            var cavisParameter = cavis.HasValue ?
                new ObjectParameter("Cavis", cavis) :
                new ObjectParameter("Cavis", typeof(bool));
    
            var suffixeParameter = suffixe != null ?
                new ObjectParameter("Suffixe", suffixe) :
                new ObjectParameter("Suffixe", typeof(string));
    
            var situationFamilialleParameter = situationFamilialle.HasValue ?
                new ObjectParameter("SituationFamilialle", situationFamilialle) :
                new ObjectParameter("SituationFamilialle", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_CREATE_EMPLOYE", codeEmployeParameter, matriculeEmployeParameter, codeAppellationParameter, nomEmployeParameter, cinParameter, dateCinParameter, passeportParameter, datePasseportParameter, dateEntreeParameter, dateSortieParameter, codeFonctionParameter, codeDepartementParameter, salaireBaseParameter, tauxHoraireParameter, codeGrilleParameter, codeSituationParameter, dateSituationParameter, chefFamilleParameter, congeAnnuelParameter, congeAnterieurParameter, matriculeSecuriteSocialeParameter, matriculeAssuranceGroupeParameter, numeroPermisConduiteParameter, codeModePaiementParameter, codeBanqueParameter, agenceBanqueParameter, ribParameter, dateNaissanceParameter, lieuNaissanceParameter, adresseParameter, villeParameter, codePostalParameter, telephone1Parameter, telephone2Parameter, adresseMailParameter, nationaliteParameter, photoEmployeParameter, taillePhotoParameter, codeOperateurParameter, dateModificationParameter, codePlanParameter, notesParameter, codeNaturePaiementParameter, tauxJournalierParameter, imposableParameter, cotisationSocialeParameter, assuranceGroupeParameter, impotLiquidatifParameter, smigParameter, redevanceCompensationParameter, montantPlafondAssuranceGroupeParameter, imposableAnterieurParameter, impotAnterieurParameter, anneeImpotAnterieurParameter, cavisParameter, suffixeParameter, situationFamilialleParameter);
        }
    
        public virtual int PROC_CREATE_USER(string codeUser, string username, string firstName, string lastName, byte[] passwordHash, byte[] passwordSalt, string login, string password, string adresseMail, Nullable<int> connections, string macAddress, Nullable<System.DateTime> createDate, Nullable<System.DateTime> modifyDate, Nullable<bool> status, string picture_URL, string codeRole, string ipAddress, Nullable<bool> isDisconnected, Nullable<bool> isAuthenticated)
        {
            var codeUserParameter = codeUser != null ?
                new ObjectParameter("CodeUser", codeUser) :
                new ObjectParameter("CodeUser", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("PasswordHash", passwordHash) :
                new ObjectParameter("PasswordHash", typeof(byte[]));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(byte[]));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var adresseMailParameter = adresseMail != null ?
                new ObjectParameter("AdresseMail", adresseMail) :
                new ObjectParameter("AdresseMail", typeof(string));
    
            var connectionsParameter = connections.HasValue ?
                new ObjectParameter("Connections", connections) :
                new ObjectParameter("Connections", typeof(int));
    
            var macAddressParameter = macAddress != null ?
                new ObjectParameter("MacAddress", macAddress) :
                new ObjectParameter("MacAddress", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var modifyDateParameter = modifyDate.HasValue ?
                new ObjectParameter("ModifyDate", modifyDate) :
                new ObjectParameter("ModifyDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var picture_URLParameter = picture_URL != null ?
                new ObjectParameter("Picture_URL", picture_URL) :
                new ObjectParameter("Picture_URL", typeof(string));
    
            var codeRoleParameter = codeRole != null ?
                new ObjectParameter("CodeRole", codeRole) :
                new ObjectParameter("CodeRole", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var isDisconnectedParameter = isDisconnected.HasValue ?
                new ObjectParameter("IsDisconnected", isDisconnected) :
                new ObjectParameter("IsDisconnected", typeof(bool));
    
            var isAuthenticatedParameter = isAuthenticated.HasValue ?
                new ObjectParameter("IsAuthenticated", isAuthenticated) :
                new ObjectParameter("IsAuthenticated", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_CREATE_USER", codeUserParameter, usernameParameter, firstNameParameter, lastNameParameter, passwordHashParameter, passwordSaltParameter, loginParameter, passwordParameter, adresseMailParameter, connectionsParameter, macAddressParameter, createDateParameter, modifyDateParameter, statusParameter, picture_URLParameter, codeRoleParameter, ipAddressParameter, isDisconnectedParameter, isAuthenticatedParameter);
        }
    
        public virtual int PROC_DELETE_BULLETIN_PAIE(string numeroBulletin)
        {
            var numeroBulletinParameter = numeroBulletin != null ?
                new ObjectParameter("NumeroBulletin", numeroBulletin) :
                new ObjectParameter("NumeroBulletin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_DELETE_BULLETIN_PAIE", numeroBulletinParameter);
        }
    
        public virtual int PROC_DELETE_EMPLOYE(string codeEmp)
        {
            var codeEmpParameter = codeEmp != null ?
                new ObjectParameter("CodeEmp", codeEmp) :
                new ObjectParameter("CodeEmp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_DELETE_EMPLOYE", codeEmpParameter);
        }
    
        public virtual int PROC_DELETE_USER(string codeUser)
        {
            var codeUserParameter = codeUser != null ?
                new ObjectParameter("CodeUser", codeUser) :
                new ObjectParameter("CodeUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_DELETE_USER", codeUserParameter);
        }
    
        public virtual ObjectResult<PROC_GET_BULLETIN_PAIE_DETAILSByNumero_Result> PROC_GET_BULLETIN_PAIE_DETAILSByNumero(string numeroBulletin, string codeRubrique)
        {
            var numeroBulletinParameter = numeroBulletin != null ?
                new ObjectParameter("NumeroBulletin", numeroBulletin) :
                new ObjectParameter("NumeroBulletin", typeof(string));
    
            var codeRubriqueParameter = codeRubrique != null ?
                new ObjectParameter("CodeRubrique", codeRubrique) :
                new ObjectParameter("CodeRubrique", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_GET_BULLETIN_PAIE_DETAILSByNumero_Result>("PROC_GET_BULLETIN_PAIE_DETAILSByNumero", numeroBulletinParameter, codeRubriqueParameter);
        }
    
        public virtual ObjectResult<string> PROC_GET_ISACTIVE_REFRESH_TOKEN(string username, Nullable<bool> isActive)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PROC_GET_ISACTIVE_REFRESH_TOKEN", usernameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<string> PROC_GET_USER_ROLE(string codeEmploye)
        {
            var codeEmployeParameter = codeEmploye != null ?
                new ObjectParameter("CodeEmploye", codeEmploye) :
                new ObjectParameter("CodeEmploye", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PROC_GET_USER_ROLE", codeEmployeParameter);
        }
    
        public virtual ObjectResult<PROC_GET_USERByID_Result> PROC_GET_USERByID(string codeUser)
        {
            var codeUserParameter = codeUser != null ?
                new ObjectParameter("CodeUser", codeUser) :
                new ObjectParameter("CodeUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_GET_USERByID_Result>("PROC_GET_USERByID", codeUserParameter);
        }
    
        public virtual ObjectResult<PROC_GetUSER_WithToken_Ref_Result> PROC_GetUSER_WithToken_Ref(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_GetUSER_WithToken_Ref_Result>("PROC_GetUSER_WithToken_Ref", usernameParameter);
        }
    
        public virtual int PROC_INCREMENT_CONNECTION_USER(string codeUser, Nullable<int> connections)
        {
            var codeUserParameter = codeUser != null ?
                new ObjectParameter("CodeUser", codeUser) :
                new ObjectParameter("CodeUser", typeof(string));
    
            var connectionsParameter = connections.HasValue ?
                new ObjectParameter("Connections", connections) :
                new ObjectParameter("Connections", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_INCREMENT_CONNECTION_USER", codeUserParameter, connectionsParameter);
        }
    
        public virtual ObjectResult<PROC_SELECT_BULLETIN_PAIE_ByNumero_Result> PROC_SELECT_BULLETIN_PAIE_ByNumero(string numeroBulletin)
        {
            var numeroBulletinParameter = numeroBulletin != null ?
                new ObjectParameter("NumeroBulletin", numeroBulletin) :
                new ObjectParameter("NumeroBulletin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_SELECT_BULLETIN_PAIE_ByNumero_Result>("PROC_SELECT_BULLETIN_PAIE_ByNumero", numeroBulletinParameter);
        }
    
        public virtual ObjectResult<PROC_SELECT_BULLETINS_PAIE_Result> PROC_SELECT_BULLETINS_PAIE()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_SELECT_BULLETINS_PAIE_Result>("PROC_SELECT_BULLETINS_PAIE");
        }
    
        public virtual ObjectResult<PROC_SELECT_EMPLOYE_Result> PROC_SELECT_EMPLOYE()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_SELECT_EMPLOYE_Result>("PROC_SELECT_EMPLOYE");
        }
    
        public virtual ObjectResult<PROC_SELECT_EMPLOYEbyCode_Result> PROC_SELECT_EMPLOYEbyCode(string codeEmp)
        {
            var codeEmpParameter = codeEmp != null ?
                new ObjectParameter("CodeEmp", codeEmp) :
                new ObjectParameter("CodeEmp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_SELECT_EMPLOYEbyCode_Result>("PROC_SELECT_EMPLOYEbyCode", codeEmpParameter);
        }
    
        public virtual ObjectResult<PROC_SELECT_ROLE_Result> PROC_SELECT_ROLE()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_SELECT_ROLE_Result>("PROC_SELECT_ROLE");
        }
    
        public virtual ObjectResult<PROC_SELECT_USER_Result> PROC_SELECT_USER()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_SELECT_USER_Result>("PROC_SELECT_USER");
        }
    
        public virtual ObjectResult<PROC_SELECT_USERbyCode_Result> PROC_SELECT_USERbyCode(string codeUser)
        {
            var codeUserParameter = codeUser != null ?
                new ObjectParameter("CodeUser", codeUser) :
                new ObjectParameter("CodeUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_SELECT_USERbyCode_Result>("PROC_SELECT_USERbyCode", codeUserParameter);
        }
    
        public virtual int PROC_UPDATE_BulletinPaie(string numeroBulletin, Nullable<System.DateTime> datePaye, string codePlan, string codePeriode, string libellePeriode, string codeTypePeriode, Nullable<int> jourBase, Nullable<int> heureBase, string codeModele, string codeModePaiement, string codeBanque, string libelleBanque, string codeEmploye, string nomEmploye, Nullable<bool> valide, Nullable<decimal> salaireBase, Nullable<decimal> salaireNet, string rIB, string cIN, string matriculeCNSS, string matriculeAssuranceGroupe, string notes, string codeOperateur, Nullable<System.DateTime> dateOperation, Nullable<bool> chefFamille, Nullable<int> nombrePersonneACharge, Nullable<decimal> totalDeduction, string codeDepartement, string libelleDepartement, string codeFonction, string libelleFonction, string codeGrille, string codeSituation, Nullable<bool> smig, Nullable<bool> imposable, Nullable<bool> cotisationSociale, Nullable<bool> assuranceGroupe, Nullable<bool> impotLiquidatif, Nullable<decimal> montantPlafondAssuranceGroupe, Nullable<decimal> montantRedevanceCompensation, string matriculeEmploye, Nullable<bool> redevanceCompensation, Nullable<decimal> montantCavis, Nullable<bool> cavis, Nullable<decimal> soldeConge, string codeTypeContrat, Nullable<decimal> arrondissementPositif, Nullable<decimal> arrondissementNegatif)
        {
            var numeroBulletinParameter = numeroBulletin != null ?
                new ObjectParameter("NumeroBulletin", numeroBulletin) :
                new ObjectParameter("NumeroBulletin", typeof(string));
    
            var datePayeParameter = datePaye.HasValue ?
                new ObjectParameter("DatePaye", datePaye) :
                new ObjectParameter("DatePaye", typeof(System.DateTime));
    
            var codePlanParameter = codePlan != null ?
                new ObjectParameter("CodePlan", codePlan) :
                new ObjectParameter("CodePlan", typeof(string));
    
            var codePeriodeParameter = codePeriode != null ?
                new ObjectParameter("CodePeriode", codePeriode) :
                new ObjectParameter("CodePeriode", typeof(string));
    
            var libellePeriodeParameter = libellePeriode != null ?
                new ObjectParameter("LibellePeriode", libellePeriode) :
                new ObjectParameter("LibellePeriode", typeof(string));
    
            var codeTypePeriodeParameter = codeTypePeriode != null ?
                new ObjectParameter("CodeTypePeriode", codeTypePeriode) :
                new ObjectParameter("CodeTypePeriode", typeof(string));
    
            var jourBaseParameter = jourBase.HasValue ?
                new ObjectParameter("JourBase", jourBase) :
                new ObjectParameter("JourBase", typeof(int));
    
            var heureBaseParameter = heureBase.HasValue ?
                new ObjectParameter("HeureBase", heureBase) :
                new ObjectParameter("HeureBase", typeof(int));
    
            var codeModeleParameter = codeModele != null ?
                new ObjectParameter("CodeModele", codeModele) :
                new ObjectParameter("CodeModele", typeof(string));
    
            var codeModePaiementParameter = codeModePaiement != null ?
                new ObjectParameter("CodeModePaiement", codeModePaiement) :
                new ObjectParameter("CodeModePaiement", typeof(string));
    
            var codeBanqueParameter = codeBanque != null ?
                new ObjectParameter("CodeBanque", codeBanque) :
                new ObjectParameter("CodeBanque", typeof(string));
    
            var libelleBanqueParameter = libelleBanque != null ?
                new ObjectParameter("LibelleBanque", libelleBanque) :
                new ObjectParameter("LibelleBanque", typeof(string));
    
            var codeEmployeParameter = codeEmploye != null ?
                new ObjectParameter("CodeEmploye", codeEmploye) :
                new ObjectParameter("CodeEmploye", typeof(string));
    
            var nomEmployeParameter = nomEmploye != null ?
                new ObjectParameter("NomEmploye", nomEmploye) :
                new ObjectParameter("NomEmploye", typeof(string));
    
            var valideParameter = valide.HasValue ?
                new ObjectParameter("Valide", valide) :
                new ObjectParameter("Valide", typeof(bool));
    
            var salaireBaseParameter = salaireBase.HasValue ?
                new ObjectParameter("SalaireBase", salaireBase) :
                new ObjectParameter("SalaireBase", typeof(decimal));
    
            var salaireNetParameter = salaireNet.HasValue ?
                new ObjectParameter("SalaireNet", salaireNet) :
                new ObjectParameter("SalaireNet", typeof(decimal));
    
            var rIBParameter = rIB != null ?
                new ObjectParameter("RIB", rIB) :
                new ObjectParameter("RIB", typeof(string));
    
            var cINParameter = cIN != null ?
                new ObjectParameter("CIN", cIN) :
                new ObjectParameter("CIN", typeof(string));
    
            var matriculeCNSSParameter = matriculeCNSS != null ?
                new ObjectParameter("MatriculeCNSS", matriculeCNSS) :
                new ObjectParameter("MatriculeCNSS", typeof(string));
    
            var matriculeAssuranceGroupeParameter = matriculeAssuranceGroupe != null ?
                new ObjectParameter("MatriculeAssuranceGroupe", matriculeAssuranceGroupe) :
                new ObjectParameter("MatriculeAssuranceGroupe", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var codeOperateurParameter = codeOperateur != null ?
                new ObjectParameter("CodeOperateur", codeOperateur) :
                new ObjectParameter("CodeOperateur", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var chefFamilleParameter = chefFamille.HasValue ?
                new ObjectParameter("ChefFamille", chefFamille) :
                new ObjectParameter("ChefFamille", typeof(bool));
    
            var nombrePersonneAChargeParameter = nombrePersonneACharge.HasValue ?
                new ObjectParameter("NombrePersonneACharge", nombrePersonneACharge) :
                new ObjectParameter("NombrePersonneACharge", typeof(int));
    
            var totalDeductionParameter = totalDeduction.HasValue ?
                new ObjectParameter("TotalDeduction", totalDeduction) :
                new ObjectParameter("TotalDeduction", typeof(decimal));
    
            var codeDepartementParameter = codeDepartement != null ?
                new ObjectParameter("CodeDepartement", codeDepartement) :
                new ObjectParameter("CodeDepartement", typeof(string));
    
            var libelleDepartementParameter = libelleDepartement != null ?
                new ObjectParameter("LibelleDepartement", libelleDepartement) :
                new ObjectParameter("LibelleDepartement", typeof(string));
    
            var codeFonctionParameter = codeFonction != null ?
                new ObjectParameter("CodeFonction", codeFonction) :
                new ObjectParameter("CodeFonction", typeof(string));
    
            var libelleFonctionParameter = libelleFonction != null ?
                new ObjectParameter("LibelleFonction", libelleFonction) :
                new ObjectParameter("LibelleFonction", typeof(string));
    
            var codeGrilleParameter = codeGrille != null ?
                new ObjectParameter("CodeGrille", codeGrille) :
                new ObjectParameter("CodeGrille", typeof(string));
    
            var codeSituationParameter = codeSituation != null ?
                new ObjectParameter("CodeSituation", codeSituation) :
                new ObjectParameter("CodeSituation", typeof(string));
    
            var smigParameter = smig.HasValue ?
                new ObjectParameter("Smig", smig) :
                new ObjectParameter("Smig", typeof(bool));
    
            var imposableParameter = imposable.HasValue ?
                new ObjectParameter("Imposable", imposable) :
                new ObjectParameter("Imposable", typeof(bool));
    
            var cotisationSocialeParameter = cotisationSociale.HasValue ?
                new ObjectParameter("CotisationSociale", cotisationSociale) :
                new ObjectParameter("CotisationSociale", typeof(bool));
    
            var assuranceGroupeParameter = assuranceGroupe.HasValue ?
                new ObjectParameter("AssuranceGroupe", assuranceGroupe) :
                new ObjectParameter("AssuranceGroupe", typeof(bool));
    
            var impotLiquidatifParameter = impotLiquidatif.HasValue ?
                new ObjectParameter("ImpotLiquidatif", impotLiquidatif) :
                new ObjectParameter("ImpotLiquidatif", typeof(bool));
    
            var montantPlafondAssuranceGroupeParameter = montantPlafondAssuranceGroupe.HasValue ?
                new ObjectParameter("MontantPlafondAssuranceGroupe", montantPlafondAssuranceGroupe) :
                new ObjectParameter("MontantPlafondAssuranceGroupe", typeof(decimal));
    
            var montantRedevanceCompensationParameter = montantRedevanceCompensation.HasValue ?
                new ObjectParameter("MontantRedevanceCompensation", montantRedevanceCompensation) :
                new ObjectParameter("MontantRedevanceCompensation", typeof(decimal));
    
            var matriculeEmployeParameter = matriculeEmploye != null ?
                new ObjectParameter("MatriculeEmploye", matriculeEmploye) :
                new ObjectParameter("MatriculeEmploye", typeof(string));
    
            var redevanceCompensationParameter = redevanceCompensation.HasValue ?
                new ObjectParameter("RedevanceCompensation", redevanceCompensation) :
                new ObjectParameter("RedevanceCompensation", typeof(bool));
    
            var montantCavisParameter = montantCavis.HasValue ?
                new ObjectParameter("MontantCavis", montantCavis) :
                new ObjectParameter("MontantCavis", typeof(decimal));
    
            var cavisParameter = cavis.HasValue ?
                new ObjectParameter("Cavis", cavis) :
                new ObjectParameter("Cavis", typeof(bool));
    
            var soldeCongeParameter = soldeConge.HasValue ?
                new ObjectParameter("SoldeConge", soldeConge) :
                new ObjectParameter("SoldeConge", typeof(decimal));
    
            var codeTypeContratParameter = codeTypeContrat != null ?
                new ObjectParameter("CodeTypeContrat", codeTypeContrat) :
                new ObjectParameter("CodeTypeContrat", typeof(string));
    
            var arrondissementPositifParameter = arrondissementPositif.HasValue ?
                new ObjectParameter("ArrondissementPositif", arrondissementPositif) :
                new ObjectParameter("ArrondissementPositif", typeof(decimal));
    
            var arrondissementNegatifParameter = arrondissementNegatif.HasValue ?
                new ObjectParameter("ArrondissementNegatif", arrondissementNegatif) :
                new ObjectParameter("ArrondissementNegatif", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_UPDATE_BulletinPaie", numeroBulletinParameter, datePayeParameter, codePlanParameter, codePeriodeParameter, libellePeriodeParameter, codeTypePeriodeParameter, jourBaseParameter, heureBaseParameter, codeModeleParameter, codeModePaiementParameter, codeBanqueParameter, libelleBanqueParameter, codeEmployeParameter, nomEmployeParameter, valideParameter, salaireBaseParameter, salaireNetParameter, rIBParameter, cINParameter, matriculeCNSSParameter, matriculeAssuranceGroupeParameter, notesParameter, codeOperateurParameter, dateOperationParameter, chefFamilleParameter, nombrePersonneAChargeParameter, totalDeductionParameter, codeDepartementParameter, libelleDepartementParameter, codeFonctionParameter, libelleFonctionParameter, codeGrilleParameter, codeSituationParameter, smigParameter, imposableParameter, cotisationSocialeParameter, assuranceGroupeParameter, impotLiquidatifParameter, montantPlafondAssuranceGroupeParameter, montantRedevanceCompensationParameter, matriculeEmployeParameter, redevanceCompensationParameter, montantCavisParameter, cavisParameter, soldeCongeParameter, codeTypeContratParameter, arrondissementPositifParameter, arrondissementNegatifParameter);
        }
    
        public virtual int PROC_UPDATE_Employe(string codeEmploye, string matriculeEmploye, string codeAppellation, string nomEmploye, string cin, Nullable<System.DateTime> dateCin, string passeport, Nullable<System.DateTime> datePasseport, Nullable<System.DateTime> dateEntree, Nullable<System.DateTime> dateSortie, string codeFonction, string codeDepartement, Nullable<decimal> salaireBase, Nullable<decimal> tauxHoraire, string codeGrille, string codeSituation, Nullable<System.DateTime> dateSituation, Nullable<bool> chefFamille, Nullable<decimal> congeAnnuel, Nullable<decimal> congeAnterieur, string matriculeSecuriteSociale, string matriculeAssuranceGroupe, string numeroPermisConduite, string codeModePaiement, string codeBanque, string agenceBanque, string rib, Nullable<System.DateTime> dateNaissance, string lieuNaissance, string adresse, string ville, string codePostal, string telephone1, string telephone2, string adresseMail, string nationalite, byte[] photoEmploye, Nullable<int> taillePhoto, string codeOperateur, Nullable<System.DateTime> dateModification, string codePlan, string notes, string codeNaturePaiement, Nullable<decimal> tauxJournalier, Nullable<bool> imposable, Nullable<bool> cotisationSociale, Nullable<bool> assuranceGroupe, Nullable<bool> impotLiquidatif, Nullable<bool> smig, Nullable<bool> redevanceCompensation, Nullable<decimal> montantPlafondAssuranceGroupe, Nullable<decimal> imposableAnterieur, Nullable<decimal> impotAnterieur, string anneeImpotAnterieur, Nullable<bool> cavis, string suffixe, Nullable<int> situationFamilialle)
        {
            var codeEmployeParameter = codeEmploye != null ?
                new ObjectParameter("CodeEmploye", codeEmploye) :
                new ObjectParameter("CodeEmploye", typeof(string));
    
            var matriculeEmployeParameter = matriculeEmploye != null ?
                new ObjectParameter("MatriculeEmploye", matriculeEmploye) :
                new ObjectParameter("MatriculeEmploye", typeof(string));
    
            var codeAppellationParameter = codeAppellation != null ?
                new ObjectParameter("CodeAppellation", codeAppellation) :
                new ObjectParameter("CodeAppellation", typeof(string));
    
            var nomEmployeParameter = nomEmploye != null ?
                new ObjectParameter("NomEmploye", nomEmploye) :
                new ObjectParameter("NomEmploye", typeof(string));
    
            var cinParameter = cin != null ?
                new ObjectParameter("Cin", cin) :
                new ObjectParameter("Cin", typeof(string));
    
            var dateCinParameter = dateCin.HasValue ?
                new ObjectParameter("DateCin", dateCin) :
                new ObjectParameter("DateCin", typeof(System.DateTime));
    
            var passeportParameter = passeport != null ?
                new ObjectParameter("Passeport", passeport) :
                new ObjectParameter("Passeport", typeof(string));
    
            var datePasseportParameter = datePasseport.HasValue ?
                new ObjectParameter("DatePasseport", datePasseport) :
                new ObjectParameter("DatePasseport", typeof(System.DateTime));
    
            var dateEntreeParameter = dateEntree.HasValue ?
                new ObjectParameter("DateEntree", dateEntree) :
                new ObjectParameter("DateEntree", typeof(System.DateTime));
    
            var dateSortieParameter = dateSortie.HasValue ?
                new ObjectParameter("DateSortie", dateSortie) :
                new ObjectParameter("DateSortie", typeof(System.DateTime));
    
            var codeFonctionParameter = codeFonction != null ?
                new ObjectParameter("CodeFonction", codeFonction) :
                new ObjectParameter("CodeFonction", typeof(string));
    
            var codeDepartementParameter = codeDepartement != null ?
                new ObjectParameter("CodeDepartement", codeDepartement) :
                new ObjectParameter("CodeDepartement", typeof(string));
    
            var salaireBaseParameter = salaireBase.HasValue ?
                new ObjectParameter("SalaireBase", salaireBase) :
                new ObjectParameter("SalaireBase", typeof(decimal));
    
            var tauxHoraireParameter = tauxHoraire.HasValue ?
                new ObjectParameter("TauxHoraire", tauxHoraire) :
                new ObjectParameter("TauxHoraire", typeof(decimal));
    
            var codeGrilleParameter = codeGrille != null ?
                new ObjectParameter("CodeGrille", codeGrille) :
                new ObjectParameter("CodeGrille", typeof(string));
    
            var codeSituationParameter = codeSituation != null ?
                new ObjectParameter("CodeSituation", codeSituation) :
                new ObjectParameter("CodeSituation", typeof(string));
    
            var dateSituationParameter = dateSituation.HasValue ?
                new ObjectParameter("DateSituation", dateSituation) :
                new ObjectParameter("DateSituation", typeof(System.DateTime));
    
            var chefFamilleParameter = chefFamille.HasValue ?
                new ObjectParameter("ChefFamille", chefFamille) :
                new ObjectParameter("ChefFamille", typeof(bool));
    
            var congeAnnuelParameter = congeAnnuel.HasValue ?
                new ObjectParameter("CongeAnnuel", congeAnnuel) :
                new ObjectParameter("CongeAnnuel", typeof(decimal));
    
            var congeAnterieurParameter = congeAnterieur.HasValue ?
                new ObjectParameter("CongeAnterieur", congeAnterieur) :
                new ObjectParameter("CongeAnterieur", typeof(decimal));
    
            var matriculeSecuriteSocialeParameter = matriculeSecuriteSociale != null ?
                new ObjectParameter("MatriculeSecuriteSociale", matriculeSecuriteSociale) :
                new ObjectParameter("MatriculeSecuriteSociale", typeof(string));
    
            var matriculeAssuranceGroupeParameter = matriculeAssuranceGroupe != null ?
                new ObjectParameter("MatriculeAssuranceGroupe", matriculeAssuranceGroupe) :
                new ObjectParameter("MatriculeAssuranceGroupe", typeof(string));
    
            var numeroPermisConduiteParameter = numeroPermisConduite != null ?
                new ObjectParameter("NumeroPermisConduite", numeroPermisConduite) :
                new ObjectParameter("NumeroPermisConduite", typeof(string));
    
            var codeModePaiementParameter = codeModePaiement != null ?
                new ObjectParameter("CodeModePaiement", codeModePaiement) :
                new ObjectParameter("CodeModePaiement", typeof(string));
    
            var codeBanqueParameter = codeBanque != null ?
                new ObjectParameter("CodeBanque", codeBanque) :
                new ObjectParameter("CodeBanque", typeof(string));
    
            var agenceBanqueParameter = agenceBanque != null ?
                new ObjectParameter("AgenceBanque", agenceBanque) :
                new ObjectParameter("AgenceBanque", typeof(string));
    
            var ribParameter = rib != null ?
                new ObjectParameter("Rib", rib) :
                new ObjectParameter("Rib", typeof(string));
    
            var dateNaissanceParameter = dateNaissance.HasValue ?
                new ObjectParameter("DateNaissance", dateNaissance) :
                new ObjectParameter("DateNaissance", typeof(System.DateTime));
    
            var lieuNaissanceParameter = lieuNaissance != null ?
                new ObjectParameter("LieuNaissance", lieuNaissance) :
                new ObjectParameter("LieuNaissance", typeof(string));
    
            var adresseParameter = adresse != null ?
                new ObjectParameter("Adresse", adresse) :
                new ObjectParameter("Adresse", typeof(string));
    
            var villeParameter = ville != null ?
                new ObjectParameter("Ville", ville) :
                new ObjectParameter("Ville", typeof(string));
    
            var codePostalParameter = codePostal != null ?
                new ObjectParameter("CodePostal", codePostal) :
                new ObjectParameter("CodePostal", typeof(string));
    
            var telephone1Parameter = telephone1 != null ?
                new ObjectParameter("Telephone1", telephone1) :
                new ObjectParameter("Telephone1", typeof(string));
    
            var telephone2Parameter = telephone2 != null ?
                new ObjectParameter("Telephone2", telephone2) :
                new ObjectParameter("Telephone2", typeof(string));
    
            var adresseMailParameter = adresseMail != null ?
                new ObjectParameter("AdresseMail", adresseMail) :
                new ObjectParameter("AdresseMail", typeof(string));
    
            var nationaliteParameter = nationalite != null ?
                new ObjectParameter("Nationalite", nationalite) :
                new ObjectParameter("Nationalite", typeof(string));
    
            var photoEmployeParameter = photoEmploye != null ?
                new ObjectParameter("PhotoEmploye", photoEmploye) :
                new ObjectParameter("PhotoEmploye", typeof(byte[]));
    
            var taillePhotoParameter = taillePhoto.HasValue ?
                new ObjectParameter("TaillePhoto", taillePhoto) :
                new ObjectParameter("TaillePhoto", typeof(int));
    
            var codeOperateurParameter = codeOperateur != null ?
                new ObjectParameter("CodeOperateur", codeOperateur) :
                new ObjectParameter("CodeOperateur", typeof(string));
    
            var dateModificationParameter = dateModification.HasValue ?
                new ObjectParameter("DateModification", dateModification) :
                new ObjectParameter("DateModification", typeof(System.DateTime));
    
            var codePlanParameter = codePlan != null ?
                new ObjectParameter("CodePlan", codePlan) :
                new ObjectParameter("CodePlan", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var codeNaturePaiementParameter = codeNaturePaiement != null ?
                new ObjectParameter("CodeNaturePaiement", codeNaturePaiement) :
                new ObjectParameter("CodeNaturePaiement", typeof(string));
    
            var tauxJournalierParameter = tauxJournalier.HasValue ?
                new ObjectParameter("TauxJournalier", tauxJournalier) :
                new ObjectParameter("TauxJournalier", typeof(decimal));
    
            var imposableParameter = imposable.HasValue ?
                new ObjectParameter("Imposable", imposable) :
                new ObjectParameter("Imposable", typeof(bool));
    
            var cotisationSocialeParameter = cotisationSociale.HasValue ?
                new ObjectParameter("CotisationSociale", cotisationSociale) :
                new ObjectParameter("CotisationSociale", typeof(bool));
    
            var assuranceGroupeParameter = assuranceGroupe.HasValue ?
                new ObjectParameter("AssuranceGroupe", assuranceGroupe) :
                new ObjectParameter("AssuranceGroupe", typeof(bool));
    
            var impotLiquidatifParameter = impotLiquidatif.HasValue ?
                new ObjectParameter("ImpotLiquidatif", impotLiquidatif) :
                new ObjectParameter("ImpotLiquidatif", typeof(bool));
    
            var smigParameter = smig.HasValue ?
                new ObjectParameter("Smig", smig) :
                new ObjectParameter("Smig", typeof(bool));
    
            var redevanceCompensationParameter = redevanceCompensation.HasValue ?
                new ObjectParameter("RedevanceCompensation", redevanceCompensation) :
                new ObjectParameter("RedevanceCompensation", typeof(bool));
    
            var montantPlafondAssuranceGroupeParameter = montantPlafondAssuranceGroupe.HasValue ?
                new ObjectParameter("MontantPlafondAssuranceGroupe", montantPlafondAssuranceGroupe) :
                new ObjectParameter("MontantPlafondAssuranceGroupe", typeof(decimal));
    
            var imposableAnterieurParameter = imposableAnterieur.HasValue ?
                new ObjectParameter("ImposableAnterieur", imposableAnterieur) :
                new ObjectParameter("ImposableAnterieur", typeof(decimal));
    
            var impotAnterieurParameter = impotAnterieur.HasValue ?
                new ObjectParameter("ImpotAnterieur", impotAnterieur) :
                new ObjectParameter("ImpotAnterieur", typeof(decimal));
    
            var anneeImpotAnterieurParameter = anneeImpotAnterieur != null ?
                new ObjectParameter("AnneeImpotAnterieur", anneeImpotAnterieur) :
                new ObjectParameter("AnneeImpotAnterieur", typeof(string));
    
            var cavisParameter = cavis.HasValue ?
                new ObjectParameter("Cavis", cavis) :
                new ObjectParameter("Cavis", typeof(bool));
    
            var suffixeParameter = suffixe != null ?
                new ObjectParameter("Suffixe", suffixe) :
                new ObjectParameter("Suffixe", typeof(string));
    
            var situationFamilialleParameter = situationFamilialle.HasValue ?
                new ObjectParameter("SituationFamilialle", situationFamilialle) :
                new ObjectParameter("SituationFamilialle", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_UPDATE_Employe", codeEmployeParameter, matriculeEmployeParameter, codeAppellationParameter, nomEmployeParameter, cinParameter, dateCinParameter, passeportParameter, datePasseportParameter, dateEntreeParameter, dateSortieParameter, codeFonctionParameter, codeDepartementParameter, salaireBaseParameter, tauxHoraireParameter, codeGrilleParameter, codeSituationParameter, dateSituationParameter, chefFamilleParameter, congeAnnuelParameter, congeAnterieurParameter, matriculeSecuriteSocialeParameter, matriculeAssuranceGroupeParameter, numeroPermisConduiteParameter, codeModePaiementParameter, codeBanqueParameter, agenceBanqueParameter, ribParameter, dateNaissanceParameter, lieuNaissanceParameter, adresseParameter, villeParameter, codePostalParameter, telephone1Parameter, telephone2Parameter, adresseMailParameter, nationaliteParameter, photoEmployeParameter, taillePhotoParameter, codeOperateurParameter, dateModificationParameter, codePlanParameter, notesParameter, codeNaturePaiementParameter, tauxJournalierParameter, imposableParameter, cotisationSocialeParameter, assuranceGroupeParameter, impotLiquidatifParameter, smigParameter, redevanceCompensationParameter, montantPlafondAssuranceGroupeParameter, imposableAnterieurParameter, impotAnterieurParameter, anneeImpotAnterieurParameter, cavisParameter, suffixeParameter, situationFamilialleParameter);
        }
    
        public virtual int PROC_UPDATE_USER(string codeUser, string firstName, string lastName, string username, string macAddress, Nullable<System.DateTime> modifyDate, Nullable<bool> status, byte[] picture, string picture_URL, string codeRole, Nullable<bool> isDisconnected, Nullable<bool> isAuthenticated)
        {
            var codeUserParameter = codeUser != null ?
                new ObjectParameter("CodeUser", codeUser) :
                new ObjectParameter("CodeUser", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var macAddressParameter = macAddress != null ?
                new ObjectParameter("MacAddress", macAddress) :
                new ObjectParameter("MacAddress", typeof(string));
    
            var modifyDateParameter = modifyDate.HasValue ?
                new ObjectParameter("ModifyDate", modifyDate) :
                new ObjectParameter("ModifyDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var pictureParameter = picture != null ?
                new ObjectParameter("Picture", picture) :
                new ObjectParameter("Picture", typeof(byte[]));
    
            var picture_URLParameter = picture_URL != null ?
                new ObjectParameter("Picture_URL", picture_URL) :
                new ObjectParameter("Picture_URL", typeof(string));
    
            var codeRoleParameter = codeRole != null ?
                new ObjectParameter("CodeRole", codeRole) :
                new ObjectParameter("CodeRole", typeof(string));
    
            var isDisconnectedParameter = isDisconnected.HasValue ?
                new ObjectParameter("IsDisconnected", isDisconnected) :
                new ObjectParameter("IsDisconnected", typeof(bool));
    
            var isAuthenticatedParameter = isAuthenticated.HasValue ?
                new ObjectParameter("IsAuthenticated", isAuthenticated) :
                new ObjectParameter("IsAuthenticated", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_UPDATE_USER", codeUserParameter, firstNameParameter, lastNameParameter, usernameParameter, macAddressParameter, modifyDateParameter, statusParameter, pictureParameter, picture_URLParameter, codeRoleParameter, isDisconnectedParameter, isAuthenticatedParameter);
        }
    
        public virtual int PROC_UPDATE_USER_TOKEN(string codeUser, string token)
        {
            var codeUserParameter = codeUser != null ?
                new ObjectParameter("CodeUser", codeUser) :
                new ObjectParameter("CodeUser", typeof(string));
    
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_UPDATE_USER_TOKEN", codeUserParameter, tokenParameter);
        }
    }
}
