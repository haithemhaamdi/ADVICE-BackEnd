// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace ADVICEDomaine.Entities
{
    public partial class ARTIPERSONNEL_SOC001Context : DbContext
    {
        public ARTIPERSONNEL_SOC001Context()
        {
        }

        public ARTIPERSONNEL_SOC001Context(DbContextOptions<ARTIPERSONNEL_SOC001Context> options)
            : base(options)
        {
        }

        public virtual DbSet<ACTIVITE> ACTIVITE { get; set; }
        public virtual DbSet<APPELLATION> APPELLATION { get; set; }
        public virtual DbSet<AVANCEMENT> AVANCEMENT { get; set; }
        public virtual DbSet<AVANCEMENT_DETAIL> AVANCEMENT_DETAIL { get; set; }
        public virtual DbSet<BANQUE> BANQUE { get; set; }
        public virtual DbSet<BANQUE_VIREMENT> BANQUE_VIREMENT { get; set; }
        public virtual DbSet<BAREME_IMPOT> BAREME_IMPOT { get; set; }
        public virtual DbSet<BAREME_SMIG> BAREME_SMIG { get; set; }
        public virtual DbSet<BORDEREAU> BORDEREAU { get; set; }
        public virtual DbSet<BULLETIN_PAIE> BULLETIN_PAIE { get; set; }
        public virtual DbSet<BULLETIN_PAIE_DETAIL> BULLETIN_PAIE_DETAIL { get; set; }
        public virtual DbSet<COMPTE_COMPTABLE> COMPTE_COMPTABLE { get; set; }
        public virtual DbSet<CONNECTIONS_HISTORY> CONNECTIONS_HISTORY { get; set; }
        public virtual DbSet<DECLARATION_CNSS> DECLARATION_CNSS { get; set; }
        public virtual DbSet<DECLARATION_CNSS_DETAIL> DECLARATION_CNSS_DETAIL { get; set; }
        public virtual DbSet<DECLARATION_CNSS_TAUX_EMPLOYEUR> DECLARATION_CNSS_TAUX_EMPLOYEUR { get; set; }
        public virtual DbSet<DECLARATION_EMPLOYEUR> DECLARATION_EMPLOYEUR { get; set; }
        public virtual DbSet<DECOMPTE_MONNAIE> DECOMPTE_MONNAIE { get; set; }
        public virtual DbSet<DEPARTEMENT> DEPARTEMENT { get; set; }
        public virtual DbSet<ECRITURE> ECRITURE { get; set; }
        public virtual DbSet<ECRITURE_DETAIL> ECRITURE_DETAIL { get; set; }
        public virtual DbSet<ECRITURE_OUVERTURE> ECRITURE_OUVERTURE { get; set; }
        public virtual DbSet<EMPLOYE> EMPLOYE { get; set; }
        public virtual DbSet<EMPLOYE_ABSENCE> EMPLOYE_ABSENCE { get; set; }
        public virtual DbSet<EMPLOYE_AFFICHAGE_GRILLE> EMPLOYE_AFFICHAGE_GRILLE { get; set; }
        public virtual DbSet<EMPLOYE_AJUSTEMENT_CONGE> EMPLOYE_AJUSTEMENT_CONGE { get; set; }
        public virtual DbSet<EMPLOYE_AVANCE> EMPLOYE_AVANCE { get; set; }
        public virtual DbSet<EMPLOYE_A_CHARGE> EMPLOYE_A_CHARGE { get; set; }
        public virtual DbSet<EMPLOYE_CONGE> EMPLOYE_CONGE { get; set; }
        public virtual DbSet<EMPLOYE_CONTRAT> EMPLOYE_CONTRAT { get; set; }
        public virtual DbSet<EMPLOYE_CORRESPONDANCE> EMPLOYE_CORRESPONDANCE { get; set; }
        public virtual DbSet<EMPLOYE_DEDUCTION> EMPLOYE_DEDUCTION { get; set; }
        public virtual DbSet<EMPLOYE_DISCIPLINE> EMPLOYE_DISCIPLINE { get; set; }
        public virtual DbSet<EMPLOYE_DOCUMENT> EMPLOYE_DOCUMENT { get; set; }
        public virtual DbSet<EMPLOYE_FORMATION> EMPLOYE_FORMATION { get; set; }
        public virtual DbSet<EMPLOYE_OBSERVATION> EMPLOYE_OBSERVATION { get; set; }
        public virtual DbSet<EMPLOYE_PRET> EMPLOYE_PRET { get; set; }
        public virtual DbSet<EMPLOYE_RUBRIQUE> EMPLOYE_RUBRIQUE { get; set; }
        public virtual DbSet<EMPLOYE_VENTILATION> EMPLOYE_VENTILATION { get; set; }
        public virtual DbSet<FONCTION> FONCTION { get; set; }
        public virtual DbSet<GRILLE> GRILLE { get; set; }
        public virtual DbSet<GRILLE_DETAIL> GRILLE_DETAIL { get; set; }
        public virtual DbSet<Grand_Livre> Grand_Livre { get; set; }
        public virtual DbSet<IMP_CAVIS> IMP_CAVIS { get; set; }
        public virtual DbSet<IMP_DECLARATION_ASSURANCE> IMP_DECLARATION_ASSURANCE { get; set; }
        public virtual DbSet<IMP_DECLARATION_MENSUEL_IMPOT> IMP_DECLARATION_MENSUEL_IMPOT { get; set; }
        public virtual DbSet<IMP_FICHE_ANNUELLE_PAIE> IMP_FICHE_ANNUELLE_PAIE { get; set; }
        public virtual DbSet<JOURNAL_COMPTABLE> JOURNAL_COMPTABLE { get; set; }
        public virtual DbSet<JOUR_FERIE> JOUR_FERIE { get; set; }
        public virtual DbSet<LISTE_RAPPORT> LISTE_RAPPORT { get; set; }
        public virtual DbSet<MODELE_CORRESPONDANCE> MODELE_CORRESPONDANCE { get; set; }
        public virtual DbSet<MODELE_PAIE> MODELE_PAIE { get; set; }
        public virtual DbSet<MODELE_PAIE_DETAIL> MODELE_PAIE_DETAIL { get; set; }
        public virtual DbSet<MODE_PAIEMENT> MODE_PAIEMENT { get; set; }
        public virtual DbSet<NATURE_PAIEMENT> NATURE_PAIEMENT { get; set; }
        public virtual DbSet<PARAMETRE_COMPTABILITE> PARAMETRE_COMPTABILITE { get; set; }
        public virtual DbSet<PARAMETRE_POINTAGE> PARAMETRE_POINTAGE { get; set; }
        public virtual DbSet<PLAN_PAIE> PLAN_PAIE { get; set; }
        public virtual DbSet<PLAN_PAIE_DETAIL> PLAN_PAIE_DETAIL { get; set; }
        public virtual DbSet<POINTAGE> POINTAGE { get; set; }
        public virtual DbSet<REFRESH_TOKEN> REFRESH_TOKEN { get; set; }
        public virtual DbSet<ROLE> ROLE { get; set; }
        public virtual DbSet<RUBRIQUE> RUBRIQUE { get; set; }
        public virtual DbSet<SEQUENCE> SEQUENCE { get; set; }
        public virtual DbSet<SITE> SITE { get; set; }
        public virtual DbSet<SITUATION_CONGE> SITUATION_CONGE { get; set; }
        public virtual DbSet<SITUATION_CONGE_SPECIAL> SITUATION_CONGE_SPECIAL { get; set; }
        public virtual DbSet<TYPE_CONTRAT> TYPE_CONTRAT { get; set; }
        public virtual DbSet<TYPE_INDEMNITE> TYPE_INDEMNITE { get; set; }
        public virtual DbSet<TYPE_PERIODE> TYPE_PERIODE { get; set; }
        public virtual DbSet<TYPE_PRET> TYPE_PRET { get; set; }
        public virtual DbSet<TYPE_RUBRIQUE> TYPE_RUBRIQUE { get; set; }
        public virtual DbSet<USER> USER { get; set; }
        public virtual DbSet<VIREMENT> VIREMENT { get; set; }
        public virtual DbSet<VIREMENT_DETAIL> VIREMENT_DETAIL { get; set; }
        public virtual DbSet<Vue_CubeAnalysePaie> Vue_CubeAnalysePaie { get; set; }
        public virtual DbSet<Vue_CubeAnalysePersonnel> Vue_CubeAnalysePersonnel { get; set; }
        public virtual DbSet<Vue_Dossier_Employe> Vue_Dossier_Employe { get; set; }
        public virtual DbSet<Vue_Employe> Vue_Employe { get; set; }
        public virtual DbSet<Vue_Mouvement_Conge> Vue_Mouvement_Conge { get; set; }
        public virtual DbSet<Vue_Mouvement_Conge_Special> Vue_Mouvement_Conge_Special { get; set; }
        public virtual DbSet<Vue_SPOT> Vue_SPOT { get; set; }
        public virtual DbSet<Vue_SituationPret> Vue_SituationPret { get; set; }
        public virtual DbSet<Vue_SoldeActuel_Conge> Vue_SoldeActuel_Conge { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ACTIVITE>(entity =>
            {
                entity.HasKey(e => e.CodeActivite);

                entity.Property(e => e.CodeActivite)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleActivite)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<APPELLATION>(entity =>
            {
                entity.HasKey(e => e.CodeAppellation);

                entity.Property(e => e.CodeAppellation)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleAppellation)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AVANCEMENT>(entity =>
            {
                entity.HasKey(e => e.NumeroAvancement);

                entity.Property(e => e.NumeroAvancement)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.DateAvancement).HasColumnType("datetime");

                entity.Property(e => e.DateOperation).HasColumnType("datetime");
            });

            modelBuilder.Entity<AVANCEMENT_DETAIL>(entity =>
            {
                entity.HasKey(e => new { e.NumeroAvancement, e.CodeEmploye });

                entity.Property(e => e.NumeroAvancement)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeDepartement)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeFonction)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeSituationAncien)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeSituationNouveau)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateSituationAncien).HasColumnType("datetime");

                entity.Property(e => e.MatriculeEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalaireBaseAncien).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SalaireBaseNouveau).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TauxHoraireAncien).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TauxHoraireNouveau).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<BANQUE>(entity =>
            {
                entity.HasKey(e => e.CodeBanque);

                entity.Property(e => e.CodeBanque)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleBanque)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<BANQUE_VIREMENT>(entity =>
            {
                entity.HasKey(e => e.CodeBanqueVirement);

                entity.Property(e => e.CodeBanqueVirement)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Adresse)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AgenceBanqueVirement)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactBanqueVirement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LibelleBanqueVirement)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumeroCompteComptable)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RIBBanqueVirement)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.tel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<BAREME_IMPOT>(entity =>
            {
                entity.HasKey(e => new { e.Montant1, e.Montant2 });

                entity.Property(e => e.Montant1).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Montant2).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Taux).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<BAREME_SMIG>(entity =>
            {
                entity.HasKey(e => new { e.Montant1, e.Montant2 });

                entity.Property(e => e.Montant1).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Montant2).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Taux).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<BORDEREAU>(entity =>
            {
                entity.HasKey(e => new { e.NumeroBordereau, e.DateBordereau, e.CodePeriode, e.CodeEmploye, e.CodeRubrique, e.CodePlan });

                entity.Property(e => e.NumeroBordereau)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.DateBordereau)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodePeriode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeRubrique)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodePlan)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Valeur).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.BORDEREAU)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BORDEREAU_EMPLOYE");

                entity.HasOne(d => d.CodeP)
                    .WithMany(p => p.BORDEREAU)
                    .HasForeignKey(d => new { d.CodePlan, d.CodePeriode })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BORDEREAU_PLAN_PAIE_DETAIL");
            });

            modelBuilder.Entity<BULLETIN_PAIE>(entity =>
            {
                entity.HasKey(e => e.NumeroBulletin);

                entity.Property(e => e.NumeroBulletin)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.ArrondissementNegatif).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ArrondissementPositif).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CIN)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodeBanque)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeDepartement)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeFonction)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeGrille)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeModePaiement)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CodeModele)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeOperateur)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodePeriode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodePlan)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeSituation)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeTypeContrat)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodeTypePeriode)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DateOperation)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DatePaye).HasColumnType("datetime");

                entity.Property(e => e.LibelleBanque)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LibelleDepartement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LibelleFonction)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LibellePeriode)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MatriculeAssuranceGroupe)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MatriculeCNSS)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MatriculeEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MontantCavis).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantPlafondAssuranceGroupe).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantRedevanceCompensation).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NomEmploye)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RIB)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalaireBase).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SalaireNet).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SoldeConge).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalDeduction).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.CodeBanqueNavigation)
                    .WithMany(p => p.BULLETIN_PAIE)
                    .HasForeignKey(d => d.CodeBanque)
                    .HasConstraintName("FK_BULLETIN_PAIE_BANQUE1");

                entity.HasOne(d => d.CodeDepartementNavigation)
                    .WithMany(p => p.BULLETIN_PAIE)
                    .HasForeignKey(d => d.CodeDepartement)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BULLETIN_PAIE_DEPARTEMENT");

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.BULLETIN_PAIE)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BULLETIN_PAIE_EMPLOYE");

                entity.HasOne(d => d.CodeFonctionNavigation)
                    .WithMany(p => p.BULLETIN_PAIE)
                    .HasForeignKey(d => d.CodeFonction)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BULLETIN_PAIE_FONCTION");

                entity.HasOne(d => d.CodeModePaiementNavigation)
                    .WithMany(p => p.BULLETIN_PAIE)
                    .HasForeignKey(d => d.CodeModePaiement)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BULLETIN_PAIE_MODE_PAIEMENT");

                entity.HasOne(d => d.CodeModeleNavigation)
                    .WithMany(p => p.BULLETIN_PAIE)
                    .HasForeignKey(d => d.CodeModele)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BULLETIN_PAIE_MODELE_PAIE");

                entity.HasOne(d => d.CodeTypePeriodeNavigation)
                    .WithMany(p => p.BULLETIN_PAIE)
                    .HasForeignKey(d => d.CodeTypePeriode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BULLETIN_PAIE_TYPE_PERIODE");

                entity.HasOne(d => d.Code)
                    .WithMany(p => p.BULLETIN_PAIE)
                    .HasForeignKey(d => new { d.CodeGrille, d.CodeSituation })
                    .HasConstraintName("FK_BULLETIN_PAIE_GRILLE_DETAIL");

                entity.HasOne(d => d.CodeP)
                    .WithMany(p => p.BULLETIN_PAIE)
                    .HasForeignKey(d => new { d.CodePlan, d.CodePeriode })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BULLETIN_PAIE_PLAN_PAIE_DETAIL");
            });

            modelBuilder.Entity<BULLETIN_PAIE_DETAIL>(entity =>
            {
                entity.HasKey(e => new { e.NumeroBulletin, e.CodeRubrique, e.CodeTypeRubrique, e.CodeSecondaire });

                entity.Property(e => e.NumeroBulletin)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.CodeRubrique)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeTypeRubrique)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodeSecondaire)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.BasePonderation).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CodeTypeIndemnite)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LibelleRubrique)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LibelleTypeRubrique)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Montant).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantBase).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantIndemnite).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantPlafondMaximum).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantPlafondMinimum).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantRubrique).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Taux).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Valeur).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<COMPTE_COMPTABLE>(entity =>
            {
                entity.HasKey(e => e.NumeroCompteComptable);

                entity.Property(e => e.NumeroCompteComptable)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleCompteComptable)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CONNECTIONS_HISTORY>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CodeEmploye)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Hostname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IpAddress)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MacAddress).IsRequired();

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SignInDate).HasColumnType("datetime");

                entity.Property(e => e.SignOutDate).HasColumnType("datetime");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.CONNECTIONS_HISTORY)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CONNECTIONS_HISTORY_USER");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.CONNECTIONS_HISTORY)
                    .HasForeignKey<CONNECTIONS_HISTORY>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CON_HISRY_REF_TKN");
            });

            modelBuilder.Entity<DECLARATION_CNSS>(entity =>
            {
                entity.HasKey(e => new { e.Annee, e.Trimestre })
                    .HasName("PK_DECLARATION_CNSS_1");

                entity.Property(e => e.CodeBanqueVirement)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodeOperateur)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateDeclaration).HasColumnType("datetime");

                entity.Property(e => e.DateOperation)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LibelleBanqueVirement)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModePaiement)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Montant).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NumeroCheque)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumeroCompteComptable)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TauxAccidentTravail).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TauxSecurite).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<DECLARATION_CNSS_DETAIL>(entity =>
            {
                entity.HasKey(e => new { e.Annee, e.Trimestre, e.TauxCotisationEmployeur, e.TauxAccidentTravail, e.CodeEmploye });

                entity.Property(e => e.TauxCotisationEmployeur).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TauxAccidentTravail).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CIN)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateEntree).HasColumnType("datetime");

                entity.Property(e => e.DateSortie).HasColumnType("datetime");

                entity.Property(e => e.MatriculeEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MatriculeSecuriteSociale)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mois1).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Mois2).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Mois3).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NomEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TauxCotisationEmploye1).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TauxCotisationEmploye2).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TauxCotisationEmploye3).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TotalEmploye).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.DECLARATION_CNSS_DETAIL)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DECLARATION_CNSS_DETAIL_EMPLOYE");

                entity.HasOne(d => d.DECLARATION_CNSS)
                    .WithMany(p => p.DECLARATION_CNSS_DETAIL)
                    .HasForeignKey(d => new { d.Annee, d.Trimestre })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DECLARATION_CNSS_DETAIL_DECLARATION_CNSS");
            });

            modelBuilder.Entity<DECLARATION_CNSS_TAUX_EMPLOYEUR>(entity =>
            {
                entity.HasKey(e => new { e.CodeEmploye, e.DateDebut, e.DateFin });

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DateDebut).HasColumnType("smalldatetime");

                entity.Property(e => e.DateFin).HasColumnType("smalldatetime");

                entity.Property(e => e.TauxAccidentTravail).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TauxCotisationEmployeur).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.DECLARATION_CNSS_TAUX_EMPLOYEUR)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DECLARATION_CNSS_TAUX_EMPLOYEUR_EMPLOYE");
            });

            modelBuilder.Entity<DECLARATION_EMPLOYEUR>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Adresse)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.CIN)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeFonction)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Deduction).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Imposable).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Impot).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.LibelleFonction)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MatriculeEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MatriculeSecuriteSociale)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Net).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NomEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreMois).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.RedevanceCompensation).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SituationFamilliale)
                    .HasMaxLength(35)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DECOMPTE_MONNAIE>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CodeEmploye)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DateSortie).HasColumnType("datetime");

                entity.Property(e => e.MatriculeEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NomEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SalaireNet).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.yMontant).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<DEPARTEMENT>(entity =>
            {
                entity.HasKey(e => e.CodeDepartement);

                entity.Property(e => e.CodeDepartement)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleDepartement)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ECRITURE>(entity =>
            {
                entity.HasKey(e => e.NumeroEcriture);

                entity.Property(e => e.NumeroEcriture)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.CodeJournalComptable)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodeUtilisateur)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateEcriture).HasColumnType("datetime");

                entity.Property(e => e.DateSaisie).HasColumnType("datetime");

                entity.Property(e => e.Origine)
                    .HasMaxLength(14)
                    .IsFixedLength();

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SousOrigine)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.CodeJournalComptableNavigation)
                    .WithMany(p => p.ECRITURE)
                    .HasForeignKey(d => d.CodeJournalComptable)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ECRITURE_JOURNAL_COMPTABLE");
            });

            modelBuilder.Entity<ECRITURE_DETAIL>(entity =>
            {
                entity.HasKey(e => new { e.NumeroEcriture, e.NumeroCompteComptable, e.LibelleEcriture, e.MontantDebit, e.MontantCredit });

                entity.Property(e => e.NumeroEcriture)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroCompteComptable)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleEcriture)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MontantDebit).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantCredit).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Lettre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.NumeroEcritureNavigation)
                    .WithMany(p => p.ECRITURE_DETAIL)
                    .HasForeignKey(d => d.NumeroEcriture)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ECRITURE_DETAIL_ECRITURE");
            });

            modelBuilder.Entity<ECRITURE_OUVERTURE>(entity =>
            {
                entity.HasKey(e => e.NumeroEcritureOuverture);

                entity.Property(e => e.NumeroEcritureOuverture)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleCompteComptable)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MontantCredit).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantDebit).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NumeroCompteComptable)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.NumeroCompteComptableNavigation)
                    .WithMany(p => p.ECRITURE_OUVERTURE)
                    .HasForeignKey(d => d.NumeroCompteComptable)
                    .HasConstraintName("FK_ECRITURE_OUVERTURE_COMPTE_COMPTABLE");
            });

            modelBuilder.Entity<EMPLOYE>(entity =>
            {
                entity.HasKey(e => e.CodeEmploye);

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Adresse)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.AdresseMail)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AgenceBanque)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnneeImpotAnterieur)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CIN)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodeAppellation)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodeBanque)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeDepartement)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodeFonction)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodeGrille)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodeModePaiement)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodeNaturePaiement)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodeOperateur)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodePlan)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodePostal)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodeSituation)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CongeAnnuel).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CongeAnterieur).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateCIN)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateEntree)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateModification)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateNaissance)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DatePasseport)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateSituation)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateSortie).HasColumnType("datetime");

                entity.Property(e => e.ImposableAnterieur).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ImpotAnterieur).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.LieuNaissance)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MatriculeAssuranceGroupe)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MatriculeEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MatriculeSecuriteSociale)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MontantPlafondAssuranceGroupe).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Nationalite)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NomEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumeroPermisConduite)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Passeport)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PhotoEmploye)
                    .IsRequired()
                    .HasColumnType("image")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RIB)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalaireBase).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SituationFamilialle).HasDefaultValueSql("((1))");

                entity.Property(e => e.Suffixe)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TauxHoraire).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TauxJournalier).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Telephone1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Telephone2)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ville)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EMPLOYE_ABSENCE>(entity =>
            {
                entity.HasKey(e => new { e.CodeAbsence, e.CodeEmploye })
                    .HasName("PK_EMPLOYE_ABSCENCE");

                entity.Property(e => e.CodeAbsence)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeOperateur)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodePeriode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateDebut)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateFin)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateOperation)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LibelleAbsence)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.EMPLOYE_ABSENCE)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EMPLOYE_ABSCENCE_EMPLOYE");
            });

            modelBuilder.Entity<EMPLOYE_AFFICHAGE_GRILLE>(entity =>
            {
                entity.HasKey(e => new { e.ColonneEmploye, e.CodeOperateur });

                entity.Property(e => e.ColonneEmploye)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodeOperateur)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<EMPLOYE_AJUSTEMENT_CONGE>(entity =>
            {
                entity.HasKey(e => new { e.CodeAjustementConge, e.CodeEmploye });

                entity.Property(e => e.CodeAjustementConge)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeOperateur)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DateAjustementConge).HasColumnType("smalldatetime");

                entity.Property(e => e.DateOperation).HasColumnType("datetime");

                entity.Property(e => e.DescriptionAjustementConge)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LibelleAjustementConge)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.EMPLOYE_AJUSTEMENT_CONGE)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EMPLOYE_AJUSTEMENT_CONGE_EMPLOYE");
            });

            modelBuilder.Entity<EMPLOYE_AVANCE>(entity =>
            {
                entity.HasKey(e => new { e.CodeAvance, e.CodeEmploye })
                    .HasName("PK_EMPLOYE_AVANCE_1");

                entity.Property(e => e.CodeAvance)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeOperateur)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateAvance)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateOperation)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LibelleAvance)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MontantAccorde).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantDemande).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.EMPLOYE_AVANCE)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EMPLOYE_AVANCE_EMPLOYE");
            });

            modelBuilder.Entity<EMPLOYE_A_CHARGE>(entity =>
            {
                entity.HasKey(e => new { e.CodeEmploye, e.CodePersonne });

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodePersonne)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DateLimite).HasColumnType("smalldatetime");

                entity.Property(e => e.DateNaissance)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nom)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Parente)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PhotoPersonne)
                    .IsRequired()
                    .HasColumnType("image")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Prenom)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.EMPLOYE_A_CHARGE)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EMPLOYE_A_CHARGE_EMPLOYE");
            });

            modelBuilder.Entity<EMPLOYE_CONGE>(entity =>
            {
                entity.HasKey(e => new { e.CodeConge, e.CodeEmploye });

                entity.Property(e => e.CodeConge)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeOperateur)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodePeriode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DateDebut)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateDebutDemande)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateDemande)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateFin)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateFinDemande)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateOperation)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LibelleConge)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MotifRefus)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.EMPLOYE_CONGE)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EMPLOYE_CONGE_EMPLOYE");
            });

            modelBuilder.Entity<EMPLOYE_CONTRAT>(entity =>
            {
                entity.HasKey(e => new { e.CodeContratEmploye, e.CodeEmploye });

                entity.Property(e => e.CodeContratEmploye)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeOperateur)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodeTypeContrat)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateDebutContrat).HasColumnType("smalldatetime");

                entity.Property(e => e.DateDebutPeriodeEssai).HasColumnType("smalldatetime");

                entity.Property(e => e.DateFinContrat).HasColumnType("smalldatetime");

                entity.Property(e => e.DateFinPeriodeEssai).HasColumnType("smalldatetime");

                entity.Property(e => e.DateOperation).HasColumnType("datetime");

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.EMPLOYE_CONTRAT)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EMPLOYE_CONTRAT_EMPLOYE");

                entity.HasOne(d => d.CodeTypeContratNavigation)
                    .WithMany(p => p.EMPLOYE_CONTRAT)
                    .HasForeignKey(d => d.CodeTypeContrat)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EMPLOYE_CONTRAT_TYPE_CONTRAT");
            });

            modelBuilder.Entity<EMPLOYE_CORRESPONDANCE>(entity =>
            {
                entity.HasKey(e => new { e.CodeEmploye, e.CodeDocument })
                    .HasName("PK_EMPLOYE_CORRESPONDANCE_1");

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeDocument)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeDocumentModele)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeOperateur)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DateDocument).HasColumnType("datetime");

                entity.Property(e => e.DateOperation).HasColumnType("datetime");

                entity.Property(e => e.DocumentCorrespondance)
                    .IsRequired()
                    .HasColumnType("image");

                entity.HasOne(d => d.CodeDocumentModeleNavigation)
                    .WithMany(p => p.EMPLOYE_CORRESPONDANCE)
                    .HasForeignKey(d => d.CodeDocumentModele)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EMPLOYE_CORRESPONDANCE_MODELE_CORRESPONDANCE");

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.EMPLOYE_CORRESPONDANCE)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EMPLOYE_CORRESPONDANCE_EMPLOYE");
            });

            modelBuilder.Entity<EMPLOYE_DEDUCTION>(entity =>
            {
                entity.HasKey(e => new { e.CodeDeduction, e.CodeEmploye });

                entity.Property(e => e.CodeDeduction)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DateValidite)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LibelleDeduction)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MontantAnnuel).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.EMPLOYE_DEDUCTION)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EMPLOYE_DEDUCTION_EMPLOYE");
            });

            modelBuilder.Entity<EMPLOYE_DISCIPLINE>(entity =>
            {
                entity.HasKey(e => new { e.CodeDiscipline, e.CodeEmploye });

                entity.Property(e => e.CodeDiscipline)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeOperateur)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DateDiscipline)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateOperation).HasColumnType("datetime");

                entity.Property(e => e.DecisionDiscipline)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LibelleDiscipline)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.EMPLOYE_DISCIPLINE)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EMPLOYE_DISCIPLINE_EMPLOYE");
            });

            modelBuilder.Entity<EMPLOYE_DOCUMENT>(entity =>
            {
                entity.HasKey(e => new { e.CodeDocument, e.CodeEmploye, e.DateDocument });

                entity.Property(e => e.CodeDocument)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DateDocument).HasColumnType("datetime");

                entity.Property(e => e.CodeOperateur)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeSecondaire)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.DateOperation).HasColumnType("datetime");

                entity.Property(e => e.ImageDocument)
                    .IsRequired()
                    .HasColumnType("image");

                entity.Property(e => e.ResumeDocument)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.TexteDocument)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TitreDocument)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TypeDocument)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.EMPLOYE_DOCUMENT)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EMPLOYE_DOCUMENT_EMPLOYE");
            });

            modelBuilder.Entity<EMPLOYE_FORMATION>(entity =>
            {
                entity.HasKey(e => new { e.CodeFormation, e.CodeEmploye });

                entity.Property(e => e.CodeFormation)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeOperateur)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateDebut)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateFin)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateOperation)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LibelleFormation)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LieuFormation)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.EMPLOYE_FORMATION)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EMPLOYE_FORMATION_EMPLOYE");
            });

            modelBuilder.Entity<EMPLOYE_OBSERVATION>(entity =>
            {
                entity.HasKey(e => new { e.CodeObservation, e.CodeEmploye });

                entity.Property(e => e.CodeObservation)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeOperateur)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContenuObservation)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateObservation)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateOperation)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.EMPLOYE_OBSERVATION)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EMPLOYE_OBSERVATION_EMPLOYE");
            });

            modelBuilder.Entity<EMPLOYE_PRET>(entity =>
            {
                entity.HasKey(e => new { e.CodePret, e.CodeEmploye })
                    .HasName("PK_EMPLOYE_PRET_1");

                entity.Property(e => e.CodePret)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeOperateur)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodeTypePret)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DateAcceptation).HasColumnType("smalldatetime");

                entity.Property(e => e.DateDemande).HasColumnType("smalldatetime");

                entity.Property(e => e.DateEffetPret).HasColumnType("smalldatetime");

                entity.Property(e => e.DateOperation)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DatePret).HasColumnType("smalldatetime");

                entity.Property(e => e.LibellePret)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MontantAccorde).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantDemande).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MotifRefus)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Tranche).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.EMPLOYE_PRET)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EMPLOYE_PRET_EMPLOYE");

                entity.HasOne(d => d.CodeTypePretNavigation)
                    .WithMany(p => p.EMPLOYE_PRET)
                    .HasForeignKey(d => d.CodeTypePret)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EMPLOYE_PRET_TYPE_PRET");
            });

            modelBuilder.Entity<EMPLOYE_RUBRIQUE>(entity =>
            {
                entity.HasKey(e => new { e.CodeEmploye, e.CodeRubrique })
                    .HasName("PK_EMPLOYE_RUBRIQUE_1");

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeRubrique)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeTypeIndemnite)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodeTypeRubrique)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LibelleRubrique)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MontantPlafondMaximum).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantPlafondMinimum).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantRubrique).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.EMPLOYE_RUBRIQUE)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EMPLOYE_RUBRIQUE_EMPLOYE");
            });

            modelBuilder.Entity<EMPLOYE_VENTILATION>(entity =>
            {
                entity.HasKey(e => new { e.CodeEmploye, e.CodeDepartement, e.CodeActivite, e.CodeFonction });

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeDepartement)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeActivite)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.CodeFonction)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Coefficient).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<FONCTION>(entity =>
            {
                entity.HasKey(e => e.CodeFonction);

                entity.Property(e => e.CodeFonction)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LibelleFonction)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<GRILLE>(entity =>
            {
                entity.HasKey(e => e.CodeGrille)
                    .HasName("PK_GRILLE_1");

                entity.Property(e => e.CodeGrille)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleGrille)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<GRILLE_DETAIL>(entity =>
            {
                entity.HasKey(e => new { e.CodeGrille, e.CodeSituation })
                    .HasName("PK_GRILLE");

                entity.Property(e => e.CodeGrille)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodeSituation)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleSituation)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalaireBase).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TauxHoraire).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.CodeGrilleNavigation)
                    .WithMany(p => p.GRILLE_DETAIL)
                    .HasForeignKey(d => d.CodeGrille)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GRILLE_DETAIL_GRILLE");
            });

            modelBuilder.Entity<Grand_Livre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Grand_Livre");

                entity.Property(e => e.CodeJournalComptable)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateEcriture).HasColumnType("datetime");

                entity.Property(e => e.Lettre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleCompteComptable)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleEcriture)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleJournalComptable)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MontantCredit).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantDebit).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NumeroCompteComptable)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroEcriture)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Origine)
                    .HasMaxLength(14)
                    .IsFixedLength();

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IMP_CAVIS>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CIN)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DateEntree).HasColumnType("datetime");

                entity.Property(e => e.DateSortie).HasColumnType("datetime");

                entity.Property(e => e.MatriculeEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MatriculeSecuriteSociale)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mois1).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Mois2).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Mois3).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NomEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalEmploye).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<IMP_DECLARATION_ASSURANCE>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CodeEmploye)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeFonction)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DateEntree).HasColumnType("datetime");

                entity.Property(e => e.DateSortie).HasColumnType("datetime");

                entity.Property(e => e.LibelleFonction)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MatriculeAssuranceGroupe)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MatriculeEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MatriculeSecuriteSociale)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mois1).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Mois2).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Mois3).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NomEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroOrdre).ValueGeneratedOnAdd();

                entity.Property(e => e.TotalEmploye).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<IMP_DECLARATION_MENSUEL_IMPOT>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BaseFOPROLOS).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.BaseRetenueSource).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.BaseTFP).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantFOPROLOS).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantImpot).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantRedevanceCompensation).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantTFP).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<IMP_FICHE_ANNUELLE_PAIE>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BaseAnnuel).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.BaseAout).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.BaseAvril).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.BaseDecembre).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.BaseFevrier).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.BaseJanvier).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.BaseJuillet).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.BaseJuin).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.BaseMai).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.BaseMars).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.BaseNovembre).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.BaseOctobre).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.BaseSeptembre).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CodeDepartement)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeRubrique)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeTypeRubrique)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LibelleDepartement)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleRubrique)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MatriculeEmploye)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MontantAnnuel).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantAout).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantAvril).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantDecembre).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantFevrier).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantJanvier).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantJuillet).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantJuin).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantMai).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantMars).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantNovembre).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantOctobre).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantSeptembre).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NomEmploye)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreAnnuel).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NombreAout).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NombreAvril).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NombreDecembre).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NombreFevrier).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NombreJanvier).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NombreJuillet).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NombreJuin).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NombreMai).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NombreMars).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NombreNovembre).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NombreOctobre).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NombreSeptembre).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<JOURNAL_COMPTABLE>(entity =>
            {
                entity.HasKey(e => e.CodeJournalComptable);

                entity.Property(e => e.CodeJournalComptable)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleJournalComptable)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroCompteComptable)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<JOUR_FERIE>(entity =>
            {
                entity.HasKey(e => e.CodeJourFerie);

                entity.Property(e => e.CodeOperateurJourFerie)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DateJourFerie)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateOperationJourFerie).HasColumnType("datetime");

                entity.Property(e => e.LibelleJourFerie)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<LISTE_RAPPORT>(entity =>
            {
                entity.HasKey(e => e.IdImpression);

                entity.Property(e => e.Impression)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LibelleImpression)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NomRapport)
                    .IsRequired()
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<MODELE_CORRESPONDANCE>(entity =>
            {
                entity.HasKey(e => e.CodeDocument);

                entity.Property(e => e.CodeDocument)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleDocument)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModeleDocument)
                    .IsRequired()
                    .HasColumnType("image");
            });

            modelBuilder.Entity<MODELE_PAIE>(entity =>
            {
                entity.HasKey(e => e.CodeModele)
                    .HasName("PK_MODELE");

                entity.Property(e => e.CodeModele)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleModele)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TitreBulletin)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<MODELE_PAIE_DETAIL>(entity =>
            {
                entity.HasKey(e => new { e.CodeModele, e.CodeTypeRubrique, e.CodeRubrique })
                    .HasName("PK_MODELE_DETAIL");

                entity.Property(e => e.CodeModele)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeTypeRubrique)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodeRubrique)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleRubrique)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CodeModeleNavigation)
                    .WithMany(p => p.MODELE_PAIE_DETAIL)
                    .HasForeignKey(d => d.CodeModele)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MODELE_DETAIL_MODELE");

                entity.HasOne(d => d.Code)
                    .WithMany(p => p.MODELE_PAIE_DETAIL)
                    .HasForeignKey(d => new { d.CodeRubrique, d.CodeTypeRubrique })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MODELE_PAIE_DETAIL_RUBRIQUE");
            });

            modelBuilder.Entity<MODE_PAIEMENT>(entity =>
            {
                entity.HasKey(e => e.CodeModePaiement)
                    .HasName("PK_MODEPAIEMENT");

                entity.Property(e => e.CodeModePaiement)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleModePaiement)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<NATURE_PAIEMENT>(entity =>
            {
                entity.HasKey(e => e.CodeNaturePaiement);

                entity.Property(e => e.CodeNaturePaiement)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LibelleNaturePaiement)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<PARAMETRE_COMPTABILITE>(entity =>
            {
                entity.HasKey(e => new { e.Groupe, e.CodeParametre });

                entity.Property(e => e.Groupe)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodeParametre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleParametre)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ValeurParametre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PARAMETRE_POINTAGE>(entity =>
            {
                entity.Property(e => e.RubriqueDimanche)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RubriqueHeurePresenceNormale)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RubriqueHeureSupplementaire25)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RubriqueHeureSupplementaire50)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RubriqueJourFerie)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<PLAN_PAIE>(entity =>
            {
                entity.HasKey(e => e.CodePlan)
                    .HasName("PK_PLAN");

                entity.Property(e => e.CodePlan)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LibellePlan)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<PLAN_PAIE_DETAIL>(entity =>
            {
                entity.HasKey(e => new { e.CodePlan, e.CodePeriode })
                    .HasName("PK_PLAN_DETAIL");

                entity.Property(e => e.CodePlan)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodePeriode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeModele)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeTypePeriode)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DatePaye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LibellePeriode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CodeModeleNavigation)
                    .WithMany(p => p.PLAN_PAIE_DETAIL)
                    .HasForeignKey(d => d.CodeModele)
                    .HasConstraintName("FK_PLAN_PAIE_DETAIL_MODELE_PAIE");

                entity.HasOne(d => d.CodePlanNavigation)
                    .WithMany(p => p.PLAN_PAIE_DETAIL)
                    .HasForeignKey(d => d.CodePlan)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLAN_DETAIL_PLAN");
            });

            modelBuilder.Entity<POINTAGE>(entity =>
            {
                entity.HasKey(e => new { e.NumeroPointage, e.DatePointage, e.NumeroBordereau, e.CodeEmploye, e.DateJour, e.DateDebutPointage, e.DateFinPointage });

                entity.Property(e => e.NumeroPointage)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.DatePointage).HasColumnType("datetime");

                entity.Property(e => e.NumeroBordereau)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DateJour)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DateDebutPointage).HasColumnType("datetime");

                entity.Property(e => e.DateFinPointage).HasColumnType("datetime");

                entity.Property(e => e.CodeJour)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodeSemaine)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LibelleJour)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NombreHeure).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.POINTAGE)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POINTAGE_EMPLOYE");
            });

            modelBuilder.Entity<REFRESH_TOKEN>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CodeEmploye)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedByIp)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Expires).HasColumnType("datetime");

                entity.Property(e => e.ReplacedByToken).IsUnicode(false);

                entity.Property(e => e.Revoked).HasColumnType("datetime");

                entity.Property(e => e.RevokedByIp)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Token).IsUnicode(false);

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.REFRESH_TOKEN)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_REFRESH_TOKEN_USER");
            });

            modelBuilder.Entity<ROLE>(entity =>
            {
                entity.HasKey(e => e.CodeRole);

                entity.Property(e => e.CodeRole)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RUBRIQUE>(entity =>
            {
                entity.HasKey(e => new { e.CodeRubrique, e.CodeTypeRubrique });

                entity.Property(e => e.CodeRubrique)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeTypeRubrique)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.BasePonderation).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CodeTypeIndemnite)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LibelleRubrique)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MontantIndemnite).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NumeroCompteComptable)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PlafondConge).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SensCompteComptable)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Taux).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TitreBordereau)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<SEQUENCE>(entity =>
            {
                entity.HasKey(e => new { e.Annee, e.TypeDocument });

                entity.Property(e => e.Annee)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TypeDocument)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Numero).HasDefaultValueSql("((0))");

                entity.Property(e => e.RecupereNumero)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<SITE>(entity =>
            {
                entity.HasKey(e => e.CodeSite);

                entity.Property(e => e.CodeSite)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleSite)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<SITUATION_CONGE>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CodeDepartement)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CongeAnnuel).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CongeAnterieur).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CongePercu).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.DateEntree).HasColumnType("datetime");

                entity.Property(e => e.DateSortie).HasColumnType("datetime");

                entity.Property(e => e.DroitConge).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.LibelleDepartement)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NomEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PresenceAnnuelle).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PresenceDue).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PresenceEffective).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SoldeConge).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<SITUATION_CONGE_SPECIAL>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CodeDepartement)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeRubrique)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CongePercuSpecial).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.DateEntree).HasColumnType("datetime");

                entity.Property(e => e.DateSortie).HasColumnType("datetime");

                entity.Property(e => e.LibelleDepartement)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleRubrique)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NomEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlafondConge).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<TYPE_CONTRAT>(entity =>
            {
                entity.HasKey(e => e.CodeTypeContrat);

                entity.Property(e => e.CodeTypeContrat)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleTypeContrat)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TYPE_INDEMNITE>(entity =>
            {
                entity.HasKey(e => e.CodeTypeIndemnite);

                entity.Property(e => e.CodeTypeIndemnite)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LibelleTypeIndemnite)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TYPE_PERIODE>(entity =>
            {
                entity.HasKey(e => e.CodeTypePeriode);

                entity.Property(e => e.CodeTypePeriode)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleTypePeriode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TYPE_PRET>(entity =>
            {
                entity.HasKey(e => e.CodeTypePret);

                entity.Property(e => e.CodeTypePret)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleTypePret)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TYPE_RUBRIQUE>(entity =>
            {
                entity.HasKey(e => e.CodeTypeRubrique);

                entity.Property(e => e.CodeTypeRubrique)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LibelleOrigine)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LibelleTypeRubrique)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<USER>(entity =>
            {
                entity.HasKey(e => e.CodeEmploye);

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AuthData).IsUnicode(false);

                entity.Property(e => e.CodeRole)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CreateDate).HasColumnType("date");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IpAddress)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Login)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifyDate).HasColumnType("date");

                entity.Property(e => e.Token).IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithOne(p => p.USER)
                    .HasForeignKey<USER>(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_USER_EMPLOYE");

                entity.HasOne(d => d.CodeRoleNavigation)
                    .WithMany(p => p.USER)
                    .HasForeignKey(d => d.CodeRole)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_USER_ROLE");
            });

            modelBuilder.Entity<VIREMENT>(entity =>
            {
                entity.HasKey(e => e.NumeroVirement);

                entity.Property(e => e.NumeroVirement)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodeBCT)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodeBanqueVirement)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DateVirement).HasColumnType("datetime");

                entity.Property(e => e.TotalVirement).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<VIREMENT_DETAIL>(entity =>
            {
                entity.HasKey(e => new { e.NumeroVirement, e.NumeroBulletin, e.CodePeriode, e.CodeEmploye, e.NomEmploye });

                entity.Property(e => e.NumeroVirement)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroBulletin)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.CodePeriode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NomEmploye)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AgenceBanque)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodeBanque)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Montant).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.RIB)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodeEmployeNavigation)
                    .WithMany(p => p.VIREMENT_DETAIL)
                    .HasForeignKey(d => d.CodeEmploye)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VIREMENT_DETAIL_EMPLOYE");

                entity.HasOne(d => d.NumeroBulletinNavigation)
                    .WithMany(p => p.VIREMENT_DETAIL)
                    .HasForeignKey(d => d.NumeroBulletin)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VIREMENT_DETAIL_BULLETIN_PAIE");

                entity.HasOne(d => d.NumeroVirementNavigation)
                    .WithMany(p => p.VIREMENT_DETAIL)
                    .HasForeignKey(d => d.NumeroVirement)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VIREMENT_DETAIL_VIREMENT");
            });

            modelBuilder.Entity<Vue_CubeAnalysePaie>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vue_CubeAnalysePaie");

                entity.Property(e => e.Affectation___Département)
                    .HasColumnName("Affectation : Département")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Affectation___Fonction)
                    .HasColumnName("Affectation : Fonction")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id___Appellation)
                    .HasColumnName("Id : Appellation")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Id___CIN)
                    .IsRequired()
                    .HasColumnName("Id : CIN")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Id___CIN_Date)
                    .HasColumnName("Id : CIN-Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Id___Code)
                    .IsRequired()
                    .HasColumnName("Id : Code")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Id___Matricule)
                    .IsRequired()
                    .HasColumnName("Id : Matricule")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id___Matricule_d_assurance_groupe)
                    .IsRequired()
                    .HasColumnName("Id : Matricule d'assurance groupe")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id___Matricule_de_sécurité_sociale)
                    .HasColumnName("Id : Matricule de sécurité sociale")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id___Nom_de_l_employé)
                    .IsRequired()
                    .HasColumnName("Id : Nom de l'employé")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Id___Numéro_du_permis)
                    .HasColumnName("Id : Numéro du permis")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id___Passeport)
                    .HasColumnName("Id : Passeport")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Informations___Adresse)
                    .HasColumnName("Informations : Adresse")
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.Informations___Année_de_naissance)
                    .HasColumnName("Informations : Année de naissance")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Informations___Code_postal)
                    .HasColumnName("Informations : Code postal")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Informations___Date_de_naissance)
                    .HasColumnName("Informations : Date de naissance")
                    .HasColumnType("datetime");

                entity.Property(e => e.Informations___EMail)
                    .HasColumnName("Informations : EMail")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Informations___Lieu_de_naissance)
                    .HasColumnName("Informations : Lieu de naissance")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Informations___Mois_de_naissance)
                    .HasColumnName("Informations : Mois de naissance")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Informations___Nationalité)
                    .HasColumnName("Informations : Nationalité")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Informations___Téléphone_1)
                    .HasColumnName("Informations : Téléphone 1")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Informations___Téléphone_2)
                    .HasColumnName("Informations : Téléphone 2")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Informations___Ville)
                    .HasColumnName("Informations : Ville")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Paiement___Agence_bancaire_de_l_employé)
                    .HasColumnName("Paiement : Agence bancaire de l'employé")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Paiement___Banque_de_l_employé)
                    .IsRequired()
                    .HasColumnName("Paiement : Banque de l'employé")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Paiement___Mode_de_paiement)
                    .HasColumnName("Paiement : Mode de paiement")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Paiement___RIB_de_l_employé)
                    .IsRequired()
                    .HasColumnName("Paiement : RIB de l'employé")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Paramètres___Adhérent_CAVIS)
                    .IsRequired()
                    .HasColumnName("Paramètres : Adhérent CAVIS")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Paramètres___Assujetti_à_l_assurance_groupe)
                    .IsRequired()
                    .HasColumnName("Paramètres : Assujetti à l'assurance groupe")
                    .HasMaxLength(34)
                    .IsUnicode(false);

                entity.Property(e => e.Paramètres___Assujetti_à_l_impôt_liquidatif)
                    .IsRequired()
                    .HasColumnName("Paramètres : Assujetti à l'impôt liquidatif")
                    .HasMaxLength(34)
                    .IsUnicode(false);

                entity.Property(e => e.Paramètres___Assujetti_à_la_cotisation_sociale)
                    .IsRequired()
                    .HasColumnName("Paramètres : Assujetti à la cotisation sociale")
                    .HasMaxLength(37)
                    .IsUnicode(false);

                entity.Property(e => e.Paramètres___Assujetti_à_la_redevance_de_compensation)
                    .IsRequired()
                    .HasColumnName("Paramètres : Assujetti à la redevance de compensation")
                    .HasMaxLength(44)
                    .IsUnicode(false);

                entity.Property(e => e.Paramètres___Imposable)
                    .IsRequired()
                    .HasColumnName("Paramètres : Imposable")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Paramètres___Plan_de_paie)
                    .HasColumnName("Paramètres : Plan de paie")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Paramètres___SMIGARD)
                    .IsRequired()
                    .HasColumnName("Paramètres : SMIGARD")
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.Période___Année_de_paie).HasColumnName("Période : Année de paie");

                entity.Property(e => e.Période___Date_de_paie)
                    .HasColumnName("Période : Date de paie")
                    .HasColumnType("datetime");

                entity.Property(e => e.Période___Libellé_de_la_période)
                    .HasColumnName("Période : Libellé de la période")
                    .HasMaxLength(268)
                    .IsUnicode(false);

                entity.Property(e => e.Période___Mois_de_paie)
                    .HasColumnName("Période : Mois de paie")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Salaire___Absence).HasColumnName("Salaire : Absence");

                entity.Property(e => e.Salaire___Base_d_assurance_groupe)
                    .HasColumnName("Salaire : Base d'assurance groupe")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Salaire___Congé).HasColumnName("Salaire : Congé");

                entity.Property(e => e.Salaire___Congé_annuel)
                    .HasColumnName("Salaire : Congé annuel")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Salaire___Cotisation_d_assurance_groupe)
                    .HasColumnName("Salaire : Cotisation d'assurance groupe")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Salaire___Cotisation_sociale)
                    .HasColumnName("Salaire : Cotisation sociale")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Salaire___Déductions_d_imposable)
                    .HasColumnName("Salaire : Déductions d'imposable")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Salaire___Imposable)
                    .HasColumnName("Salaire : Imposable")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Salaire___Impôt)
                    .HasColumnName("Salaire : Impôt")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Salaire___Montant_d_heures_supplémentaires)
                    .HasColumnName("Salaire : Montant d'heures supplémentaires")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Salaire___Montant_de_la_redevance_de_compensation)
                    .HasColumnName("Salaire : Montant de la redevance de compensation")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Salaire___Nature_de_paiement)
                    .IsRequired()
                    .HasColumnName("Salaire : Nature de paiement")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Salaire___Nombre_d_heures_supplémentaires).HasColumnName("Salaire : Nombre d'heures supplémentaires");

                entity.Property(e => e.Salaire___Présence).HasColumnName("Salaire : Présence");

                entity.Property(e => e.Salaire___Remboursement_d_avances)
                    .HasColumnName("Salaire : Remboursement d'avances")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Salaire___Remboursement_de_prêts)
                    .HasColumnName("Salaire : Remboursement de prêts")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Salaire___Salaire_brut)
                    .HasColumnName("Salaire : Salaire brut")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Salaire___Salaire_net)
                    .HasColumnName("Salaire : Salaire net")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Salaire___Solde_de_congé)
                    .HasColumnName("Salaire : Solde de congé")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Salaire___Taux_journalier)
                    .HasColumnName("Salaire : Taux journalier")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Situation___Année_d_entrée).HasColumnName("Situation : Année d'entrée");

                entity.Property(e => e.Situation___Année_de_situation)
                    .HasColumnName("Situation : Année de situation")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Situation___Année_de_sortie)
                    .HasColumnName("Situation : Année de sortie")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Situation___Date_d_entrée)
                    .HasColumnName("Situation : Date d'entrée")
                    .HasColumnType("datetime");

                entity.Property(e => e.Situation___Date_de_situation)
                    .HasColumnName("Situation : Date de situation")
                    .HasColumnType("datetime");

                entity.Property(e => e.Situation___Date_de_sortie)
                    .HasColumnName("Situation : Date de sortie")
                    .HasColumnType("datetime");

                entity.Property(e => e.Situation___Grille)
                    .HasColumnName("Situation : Grille")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Situation___Mois_d_entrée).HasColumnName("Situation : Mois d'entrée");

                entity.Property(e => e.Situation___Mois_de_situation)
                    .HasColumnName("Situation : Mois de situation")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Situation___Mois_de_sortie)
                    .HasColumnName("Situation : Mois de sortie")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Situation___Nombre_d_enfants).HasColumnName("Situation : Nombre d'enfants");

                entity.Property(e => e.Situation___Situation_dans_la_grille)
                    .HasColumnName("Situation : Situation dans la grille")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Situation___Situation_familiale)
                    .IsRequired()
                    .HasColumnName("Situation : Situation familiale")
                    .HasMaxLength(19)
                    .IsUnicode(false);

                entity.Property(e => e.Situation___Type_de_contrat)
                    .HasColumnName("Situation : Type de contrat")
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Vue_CubeAnalysePersonnel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vue_CubeAnalysePersonnel");

                entity.Property(e => e.Affectation___Département)
                    .HasColumnName("Affectation : Département")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Affectation___Fonction)
                    .HasColumnName("Affectation : Fonction")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Congé___Congé_annuel)
                    .HasColumnName("Congé : Congé annuel")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Congé___Provision_de_congé)
                    .HasColumnName("Congé : Provision de congé")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Congé___Solde_actuel_de_congé)
                    .HasColumnName("Congé : Solde actuel de congé")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Id___Appellation)
                    .IsRequired()
                    .HasColumnName("Id : Appellation")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Id___CIN)
                    .IsRequired()
                    .HasColumnName("Id : CIN")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Id___CIN_Date)
                    .HasColumnName("Id : CIN-Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Id___Code)
                    .IsRequired()
                    .HasColumnName("Id : Code")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Id___Matricule)
                    .IsRequired()
                    .HasColumnName("Id : Matricule")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id___Matricule_d_assurance_groupe)
                    .IsRequired()
                    .HasColumnName("Id : Matricule d'assurance groupe")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id___Matricule_de_sécurité_sociale)
                    .IsRequired()
                    .HasColumnName("Id : Matricule de sécurité sociale")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id___Nom_de_l_employé)
                    .IsRequired()
                    .HasColumnName("Id : Nom de l'employé")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id___Numéro_du_permis)
                    .IsRequired()
                    .HasColumnName("Id : Numéro du permis")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id___Passeport)
                    .IsRequired()
                    .HasColumnName("Id : Passeport")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Informations___Adresse)
                    .IsRequired()
                    .HasColumnName("Informations : Adresse")
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.Informations___Année_de_naissance)
                    .HasColumnName("Informations : Année de naissance")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Informations___Code_postal)
                    .IsRequired()
                    .HasColumnName("Informations : Code postal")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Informations___Date_de_naissance)
                    .HasColumnName("Informations : Date de naissance")
                    .HasColumnType("datetime");

                entity.Property(e => e.Informations___EMail)
                    .IsRequired()
                    .HasColumnName("Informations : EMail")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Informations___Lieu_de_naissance)
                    .IsRequired()
                    .HasColumnName("Informations : Lieu de naissance")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Informations___Mois_de_naissance)
                    .HasColumnName("Informations : Mois de naissance")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Informations___Nationalité)
                    .IsRequired()
                    .HasColumnName("Informations : Nationalité")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Informations___Téléphone_1)
                    .IsRequired()
                    .HasColumnName("Informations : Téléphone 1")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Informations___Téléphone_2)
                    .IsRequired()
                    .HasColumnName("Informations : Téléphone 2")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Informations___Ville)
                    .IsRequired()
                    .HasColumnName("Informations : Ville")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Paiement___Agence_bancaire_de_l_employé)
                    .IsRequired()
                    .HasColumnName("Paiement : Agence bancaire de l'employé")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Paiement___Banque_de_l_employé)
                    .HasColumnName("Paiement : Banque de l'employé")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Paiement___Mode_de_paiement)
                    .HasColumnName("Paiement : Mode de paiement")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Paiement___RIB_de_l_employé)
                    .IsRequired()
                    .HasColumnName("Paiement : RIB de l'employé")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Paramètres___Adhérent_CAVIS)
                    .IsRequired()
                    .HasColumnName("Paramètres : Adhérent CAVIS")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Paramètres___Assujetti_à_l_assurance_groupe)
                    .IsRequired()
                    .HasColumnName("Paramètres : Assujetti à l'assurance groupe")
                    .HasMaxLength(34)
                    .IsUnicode(false);

                entity.Property(e => e.Paramètres___Assujetti_à_l_impôt_liquidatif)
                    .IsRequired()
                    .HasColumnName("Paramètres : Assujetti à l'impôt liquidatif")
                    .HasMaxLength(34)
                    .IsUnicode(false);

                entity.Property(e => e.Paramètres___Assujetti_à_la_cotisation_sociale)
                    .IsRequired()
                    .HasColumnName("Paramètres : Assujetti à la cotisation sociale")
                    .HasMaxLength(37)
                    .IsUnicode(false);

                entity.Property(e => e.Paramètres___Assujetti_à_la_redevance_de_compensation)
                    .IsRequired()
                    .HasColumnName("Paramètres : Assujetti à la redevance de compensation")
                    .HasMaxLength(44)
                    .IsUnicode(false);

                entity.Property(e => e.Paramètres___Imposable)
                    .IsRequired()
                    .HasColumnName("Paramètres : Imposable")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Paramètres___SMIGARD)
                    .IsRequired()
                    .HasColumnName("Paramètres : SMIGARD")
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.Prêt___Total_accordé)
                    .HasColumnName("Prêt : Total accordé")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Prêt___Total_des_tranches)
                    .HasColumnName("Prêt : Total des tranches")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Prêt___Total_remboursé)
                    .HasColumnName("Prêt : Total remboursé")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Prêt___Total_restant)
                    .HasColumnName("Prêt : Total restant")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Salaire___Nature_de_paiement)
                    .IsRequired()
                    .HasColumnName("Salaire : Nature de paiement")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Salaire___Salaire_brut_annuel)
                    .HasColumnName("Salaire : Salaire brut annuel")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Salaire___Salaire_brut_mensuel)
                    .HasColumnName("Salaire : Salaire brut mensuel")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Salaire___Salaire_de_base)
                    .HasColumnName("Salaire : Salaire de base")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Salaire___TauxHoraire)
                    .HasColumnName("Salaire : TauxHoraire")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Salaire___Taux_journalier)
                    .HasColumnName("Salaire : Taux journalier")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Situation___Année_d_entrée).HasColumnName("Situation : Année d'entrée");

                entity.Property(e => e.Situation___Année_de_situation)
                    .HasColumnName("Situation : Année de situation")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Situation___Année_de_sortie)
                    .HasColumnName("Situation : Année de sortie")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Situation___Date_d_entrée)
                    .HasColumnName("Situation : Date d'entrée")
                    .HasColumnType("datetime");

                entity.Property(e => e.Situation___Date_de_fin_de_contrat)
                    .HasColumnName("Situation : Date de fin de contrat")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Situation___Date_de_situation)
                    .HasColumnName("Situation : Date de situation")
                    .HasColumnType("datetime");

                entity.Property(e => e.Situation___Date_de_sortie)
                    .HasColumnName("Situation : Date de sortie")
                    .HasColumnType("datetime");

                entity.Property(e => e.Situation___Grille)
                    .HasColumnName("Situation : Grille")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Situation___Mois_d_entrée).HasColumnName("Situation : Mois d'entrée");

                entity.Property(e => e.Situation___Mois_de_situation)
                    .HasColumnName("Situation : Mois de situation")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Situation___Mois_de_sortie)
                    .HasColumnName("Situation : Mois de sortie")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Situation___Nombre_d_enfants).HasColumnName("Situation : Nombre d'enfants");

                entity.Property(e => e.Situation___Situation_dans_la_grille)
                    .HasColumnName("Situation : Situation dans la grille")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Situation___Situation_familiale)
                    .IsRequired()
                    .HasColumnName("Situation : Situation familiale")
                    .HasMaxLength(19)
                    .IsUnicode(false);

                entity.Property(e => e.Situation___Type_de_contrat)
                    .HasColumnName("Situation : Type de contrat")
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Vue_Dossier_Employe>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vue_Dossier_Employe");

                entity.Property(e => e.Adresse)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.AdresseMail)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AgenceBanque)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AnneeImpotAnterieur)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CIN)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodeDepartement)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeFonction)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeGrille)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodePostal)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodeSituation)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CongeAnnuel).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CongeAnterieur).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateCIN).HasColumnType("datetime");

                entity.Property(e => e.DateEntree).HasColumnType("datetime");

                entity.Property(e => e.DateNaissance).HasColumnType("datetime");

                entity.Property(e => e.DatePasseport).HasColumnType("datetime");

                entity.Property(e => e.DateSituation).HasColumnType("datetime");

                entity.Property(e => e.DateSortie).HasColumnType("datetime");

                entity.Property(e => e.ImposableAnterieur).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ImpotAnterieur).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.LibelleBanque)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleDepartement)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleFonction)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleGrille)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleModePaiement)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleNaturePaiement)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LibellePlan)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleSituation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LieuNaissance)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MatriculeAssuranceGroupe)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MatriculeEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MatriculeSecuriteSociale)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MontantPlafondAssuranceGroupe).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Nationalite)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NomEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroPermisConduite)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Passeport)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PhotoEmploye)
                    .IsRequired()
                    .HasColumnType("image");

                entity.Property(e => e.RIB)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SalaireBase).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TauxHoraire).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TauxJournalier).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Telephone1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Telephone2)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ville)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Vue_Employe>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vue_Employe");

                entity.Property(e => e.Adresse)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.AdresseMail)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AgenceBanque)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CIN)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ChefFamille)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CodeAppellation)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeBanque)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeDepartement)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeFonction)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeGrille)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeModePaiement)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CodeNaturePaiement)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodePlan)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodePostal)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodeSituation)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CongeAnnuel).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CongeAnterieur).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateCIN).HasColumnType("datetime");

                entity.Property(e => e.DateEntree).HasColumnType("datetime");

                entity.Property(e => e.DateModification).HasColumnType("datetime");

                entity.Property(e => e.DateNaissance).HasColumnType("datetime");

                entity.Property(e => e.DatePasseport).HasColumnType("datetime");

                entity.Property(e => e.DateSituation).HasColumnType("datetime");

                entity.Property(e => e.DateSortie).HasColumnType("datetime");

                entity.Property(e => e.LibelleAppellation)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleBanque)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleDepartement)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleFonction)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleGrille)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleModePaiement)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleNaturePaiement)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LibellePlan)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleSituation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LieuNaissance)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MatriculeAssuranceGroupe)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MatriculeEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MatriculeSecuriteSociale)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nationalite)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NomEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroPermisConduite)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Passeport)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PhotoEmploye)
                    .IsRequired()
                    .HasColumnType("image");

                entity.Property(e => e.RIB)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SalaireBase).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TauxHoraire).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TauxJournalier).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Telephone1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Telephone2)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ville)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Vue_Mouvement_Conge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vue_Mouvement_Conge");

                entity.Property(e => e.CodeDepartement)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CongeAnnuel).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateMouvement).HasColumnType("datetime");

                entity.Property(e => e.DroitConge).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.LibelleDepartement)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NomEmploye)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroMouvement)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Vue_Mouvement_Conge_Special>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vue_Mouvement_Conge_Special");

                entity.Property(e => e.CodeDepartement)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeRubrique)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeTypeRubrique)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DateEntree).HasColumnType("datetime");

                entity.Property(e => e.DatePaye).HasColumnType("datetime");

                entity.Property(e => e.DateSortie).HasColumnType("datetime");

                entity.Property(e => e.LibelleDepartement)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleRubrique)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NomEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroBulletin)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.PlafondConge).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<Vue_SPOT>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vue_SPOT");

                entity.Property(e => e.TexteNotification)
                    .HasMaxLength(254)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Vue_SituationPret>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vue_SituationPret");

                entity.Property(e => e.CodeDepartement)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodePret)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.CodeTypePret)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DateEffetPret).HasColumnType("smalldatetime");

                entity.Property(e => e.LibelleDepartement)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LibellePret)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LibelleTypePret)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MontantAccorde).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MontantRembourse).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.MontantRestant).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.NomEmploye)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tranche).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<Vue_SoldeActuel_Conge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vue_SoldeActuel_Conge");

                entity.Property(e => e.CodeDepartement)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodeEmploye)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CongeAnnuel).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DroitConge).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.LibelleDepartement)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NomEmploye)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SoldeConge).HasColumnType("decimal(18, 2)");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}